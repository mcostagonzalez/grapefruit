{
    "project": {
        "name": "GrapeFruit Game Engine",
        "description": "A fun and easy WebGL-enabled JavaScript Game Engine",
        "version": "v0.1.1",
        "url": "https://github.com/grapefruitjs/grapefruit",
        "logo": "http://www.gravatar.com/avatar/e60ee7bcb380d1ab175251890046b3d8.png"
    },
    "files": {
        "src\\audio\\AudioManager.js": {
            "name": "src\\audio\\AudioManager.js",
            "modules": {},
            "classes": {
                "AudioManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\audio\\AudioPlayer.js": {
            "name": "src\\audio\\AudioPlayer.js",
            "modules": {},
            "classes": {
                "AudioPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\camera\\Camera.js": {
            "name": "src\\camera\\Camera.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\BaseTexture.js": {
            "name": "src\\display\\BaseTexture.js",
            "modules": {},
            "classes": {
                "BaseTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Container.js": {
            "name": "src\\display\\Container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Graphics.js": {
            "name": "src\\display\\Graphics.js",
            "modules": {},
            "classes": {
                "Graphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\RenderTexture.js": {
            "name": "src\\display\\RenderTexture.js",
            "modules": {},
            "classes": {
                "RenderTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Sprite.js": {
            "name": "src\\display\\Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Texture.js": {
            "name": "src\\display\\Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\TilingSprite.js": {
            "name": "src\\display\\TilingSprite.js",
            "modules": {},
            "classes": {
                "TilingSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fx\\camera\\Close.js": {
            "name": "src\\fx\\camera\\Close.js",
            "modules": {},
            "classes": {
                "fx.camera.Close": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fx\\camera\\Effect.js": {
            "name": "src\\fx\\camera\\Effect.js",
            "modules": {},
            "classes": {
                "fx.camera.Effect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fx\\camera\\Fade.js": {
            "name": "src\\fx\\camera\\Fade.js",
            "modules": {},
            "classes": {
                "fx.camera.Fade": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fx\\camera\\Flash.js": {
            "name": "src\\fx\\camera\\Flash.js",
            "modules": {},
            "classes": {
                "fx.camera.Flash": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fx\\camera\\Scanlines.js": {
            "name": "src\\fx\\camera\\Scanlines.js",
            "modules": {},
            "classes": {
                "fx.camera.Scanlines": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fx\\camera\\Shake.js": {
            "name": "src\\fx\\camera\\Shake.js",
            "modules": {},
            "classes": {
                "fx.camera.Shake": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\Game.js": {
            "name": "src\\game\\Game.js",
            "modules": {},
            "classes": {
                "Game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\State.js": {
            "name": "src\\game\\State.js",
            "modules": {},
            "classes": {
                "State": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\StateManager.js": {
            "name": "src\\game\\StateManager.js",
            "modules": {},
            "classes": {
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\World.js": {
            "name": "src\\game\\World.js",
            "modules": {},
            "classes": {
                "World": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Circle.js": {
            "name": "src\\geom\\Circle.js",
            "modules": {},
            "classes": {
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Ellipse.js": {
            "name": "src\\geom\\Ellipse.js",
            "modules": {},
            "classes": {
                "Ellipse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Polygon.js": {
            "name": "src\\geom\\Polygon.js",
            "modules": {},
            "classes": {
                "Polygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Rectangle.js": {
            "name": "src\\geom\\Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\GuiItem.js": {
            "name": "src\\gui\\GuiItem.js",
            "modules": {},
            "classes": {
                "GuiItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\gamepad\\GamepadButtons.js": {
            "name": "src\\input\\gamepad\\GamepadButtons.js",
            "modules": {},
            "classes": {
                "GamepadButtons": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\gamepad\\GamepadSticks.js": {
            "name": "src\\input\\gamepad\\GamepadSticks.js",
            "modules": {},
            "classes": {
                "GamepadSticks": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\pointer\\Pointer.js": {
            "name": "src\\input\\pointer\\Pointer.js",
            "modules": {},
            "classes": {
                "Pointer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Gamepad.js": {
            "name": "src\\input\\Gamepad.js",
            "modules": {},
            "classes": {
                "Gamepad": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Input.js": {
            "name": "src\\input\\Input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\InputManager.js": {
            "name": "src\\input\\InputManager.js",
            "modules": {},
            "classes": {
                "InputManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Keyboard.js": {
            "name": "src\\input\\Keyboard.js",
            "modules": {},
            "classes": {
                "Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Pointers.js": {
            "name": "src\\input\\Pointers.js",
            "modules": {},
            "classes": {
                "Pointers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\Loader.js": {
            "name": "src\\loader\\Loader.js",
            "modules": {},
            "classes": {
                "Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\math\\Vector.js": {
            "name": "src\\math\\Vector.js",
            "modules": {},
            "classes": {
                "Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\math\\math.js": {
            "name": "src\\math\\math.js",
            "modules": {},
            "classes": {
                "math": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\particles\\ParticleEmitter.js": {
            "name": "src\\particles\\ParticleEmitter.js",
            "modules": {},
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\particles\\ParticleSystem.js": {
            "name": "src\\particles\\ParticleSystem.js",
            "modules": {},
            "classes": {
                "ParticleSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\physics\\PhysicsSystem.js": {
            "name": "src\\physics\\PhysicsSystem.js",
            "modules": {},
            "classes": {
                "PhysicsSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\physics\\PhysicsTarget.js": {
            "name": "src\\physics\\PhysicsTarget.js",
            "modules": {},
            "classes": {
                "PhysicsTarget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\text\\BitmapText.js": {
            "name": "src\\text\\BitmapText.js",
            "modules": {},
            "classes": {
                "BitmapText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\text\\Text.js": {
            "name": "src\\text\\Text.js",
            "modules": {},
            "classes": {
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\ObjectGroup.js": {
            "name": "src\\tilemap\\ObjectGroup.js",
            "modules": {},
            "classes": {
                "ObjectGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tile.js": {
            "name": "src\\tilemap\\Tile.js",
            "modules": {},
            "classes": {
                "Tile": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tilelayer.js": {
            "name": "src\\tilemap\\Tilelayer.js",
            "modules": {},
            "classes": {
                "Tilelayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tilemap.js": {
            "name": "src\\tilemap\\Tilemap.js",
            "modules": {},
            "classes": {
                "Tilemap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tileset.js": {
            "name": "src\\tilemap\\Tileset.js",
            "modules": {},
            "classes": {
                "Tileset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Cache.js": {
            "name": "src\\utils\\Cache.js",
            "modules": {},
            "classes": {
                "Cache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Clock.js": {
            "name": "src\\utils\\Clock.js",
            "modules": {},
            "classes": {
                "Clock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\EventEmitter.js": {
            "name": "src\\utils\\EventEmitter.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\ObjectFactory.js": {
            "name": "src\\utils\\ObjectFactory.js",
            "modules": {},
            "classes": {
                "ObjectFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\ObjectPool.js": {
            "name": "src\\utils\\ObjectPool.js",
            "modules": {},
            "classes": {
                "ObjectPool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\SpritePool.js": {
            "name": "src\\utils\\SpritePool.js",
            "modules": {},
            "classes": {
                "SpritePool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\inherit.js": {
            "name": "src\\utils\\inherit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\support.js": {
            "name": "src\\utils\\support.js",
            "modules": {},
            "classes": {
                "support": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\utils.js": {
            "name": "src\\utils\\utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\constants.js": {
            "name": "src\\constants.js",
            "modules": {},
            "classes": {
                "RENDERER": 1,
                "FILE_FORMAT": 1,
                "ATLAS_FORMAT": 1,
                "CAMERA_FOLLOW": 1,
                "AXIS": 1,
                "DIRECTION": 1,
                "pkg": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core.js": {
            "name": "src\\core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\plugin.js": {
            "name": "src\\plugin.js",
            "modules": {},
            "classes": {
                "plugin": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AudioManager": {
            "name": "AudioManager",
            "shortname": "AudioManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\audio\\AudioManager.js",
            "line": 9,
            "description": "Grapefruit Audio API, provides an easy interface to use WebAudoiAPI with a fallback to HTML5 Audio\nThe GF Audio API was originally based on [Howler.js](https://github.com/goldfire/howler.js)\nGenerally you will use this via the `game.audio` or `state.audio` properties.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this manager belongs to",
                    "type": "Game"
                },
                {
                    "name": "parent",
                    "description": "The parent audio manager this manager belongs to.\n     This is used to create a web audio API node heirarchy.",
                    "type": "AudioManager"
                }
            ]
        },
        "AudioPlayer": {
            "name": "AudioPlayer",
            "shortname": "AudioPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\audio\\AudioPlayer.js",
            "line": 7,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio\nThe GF Audio API was based on [Howler.js](https://github.com/goldfire/howler.js)",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "manager",
                    "description": "AudioManager instance for this audio player",
                    "type": "AudioManager"
                },
                {
                    "name": "audio",
                    "description": "The preloaded audio file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The actual audio data",
                            "type": "ArrayBuffer|Audio"
                        },
                        {
                            "name": "webAudio",
                            "description": "Whether the file is using webAudio or not",
                            "type": "Boolean"
                        },
                        {
                            "name": "decoded",
                            "description": "Whether the data has been decoded yet or not",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "settings",
                    "description": "All the settings for this player instance",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "autoplay",
                            "description": "Whether to automatically start playing the audio file",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "loop",
                            "description": "Whether the audio should loop or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "pos3d",
                            "description": "The 3d position of the audio to play in the form [x, y, z]",
                            "type": "Array<Number>",
                            "optional": true
                        },
                        {
                            "name": "sprite",
                            "description": "The audio sprite, if this audio clip has multiple sounds in it.\n     This object is in the form `{ 'sound': [start, duration] }`, and you can use them with `.play('sound')`.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\camera\\Camera.js",
            "line": 18,
            "description": "A basic Camera object that provides some effects. It also will contain the GUI\nto ensure they are using \"screen-coords\".",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The game state this camera belongs to",
                    "type": "State"
                }
            ]
        },
        "BaseTexture": {
            "name": "BaseTexture",
            "shortname": "BaseTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\BaseTexture.js",
            "line": 1,
            "description": "A texture stores the information that represents an image. All textures have a base texture\n*This is directly exposing [PIXI.BaseTexture](http://www.goodboydigital.com/pixijs/docs/classes/BaseTexture.html)*",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "the source object (image or canvas)",
                    "type": "Image|Canvas"
                }
            ]
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Container.js",
            "line": 7,
            "description": "The base display object, that anything being put on the screen inherits from\nContainer or Sprite at some point. This class extends PIXI's DisplayObjectContainer.",
            "extends": "[PIXI.DisplayObjectContainer](http://www.goodboydigital.com/pixijs/docs/classes/DisplayObjectContainer.html)",
            "uses": [
                "EventEmitter",
                "PhysicsTarget"
            ],
            "is_constructor": 1
        },
        "Graphics": {
            "name": "Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Graphics.js",
            "line": 1,
            "description": "The Graphics class contains a set of methods that you can use to create primitive shapes and lines. \nIt is important to know that with the webGL renderer only simple polys can be filled at this stage\nComplex polys will not be filled. Heres an example of a\n[complex polygon](http://www.goodboydigital.com/wp-content/uploads/2013/06/complexPolygon.png).\n*This is directly exposing [PIXI.Graphics](http://www.goodboydigital.com/pixijs/docs/classes/Graphics.html)*",
            "extends": "[PIXI.DisplayObjectContainer](http://www.goodboydigital.com/pixijs/docs/classes/DisplayObjectContainer.html)",
            "is_constructor": 1
        },
        "RenderTexture": {
            "name": "RenderTexture",
            "shortname": "RenderTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\RenderTexture.js",
            "line": 1,
            "description": "A RenderTexture is a special texture that allows any pixi displayObject to be rendered to it.\n\n__Hint__: All DisplayObjects (exmpl. Sprites) that renders on RenderTexture should be preloaded. \nOtherwise black rectangles will be drawn instead.\n\nRenderTexture takes snapshot of DisplayObject passed to render method. If DisplayObject is passed to render method, position and rotation of it will be ignored. For example:\n\n```\nvar renderTexture = new gf.RenderTexture(800, 600);\nvar sprite = gf.Sprite(texture);\nsprite.position.x = 800/2;\nsprite.position.y = 600/2;\nsprite.anchor.x = 0.5;\nsprite.anchor.y = 0.5;\nrenderTexture.render(sprite);\n```\n\nSprite in this case will be rendered to 0,0 position. To render this sprite at center Container should be used:\n\n```\nvar doc = new gf.Container();\ndoc.addChild(sprite);\nrenderTexture.render(doc);  // Renders to center of renderTexture\n```\n\n*This is directly exposing [PIXI.RenderTexture](http://www.goodboydigital.com/pixijs/docs/classes/RenderTexture.html)*",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The width of the render texture",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the render texture",
                    "type": "Number"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Sprite.js",
            "line": 10,
            "description": "The base Sprite class. This class is the base for all images on the screen. This class extends PIXI's Sprite.",
            "extends": "[PIXI.Sprite](http://www.goodboydigital.com/pixijs/docs/classes/Sprite.html)",
            "uses": [
                "EventEmitter",
                "PhysicsTarget"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "textures",
                    "description": "The texture for the sprite to display, an array of texture to animation through, or an animation object.\n     The later looks like: `{ animationName: { frames: [frame1, frame2], speed: 0.5, loop: false } }` where each frame is a Texture object",
                    "type": "Texture|Array<Texture>|Object"
                },
                {
                    "name": "speed",
                    "description": "The speed of the animations (can be overriden on a specific animations)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "The animation to start with, defaults to the first found key otherwise",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n     var spr = new gf.Sprite(texture);"
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Texture.js",
            "line": 1,
            "description": "A texture stores the information that represents an image or part of an image. It cannot be added\nto the display list directly. It is used to desribe how a Sprite looks. If no frame is provided\nthen the whole image is used.\n*This is directly exposing [PIXI.Texture](http://www.goodboydigital.com/pixijs/docs/classes/Texture.html)*\nthough it does add some extra methods.",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "baseTexture",
                    "description": "The base texture source to create the texture from",
                    "type": "BaseTexture"
                },
                {
                    "name": "frame",
                    "description": "The rectangle frame of the texture to show",
                    "type": "Rectangle"
                }
            ]
        },
        "TilingSprite": {
            "name": "TilingSprite",
            "shortname": "TilingSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\TilingSprite.js",
            "line": 1,
            "description": "A tiling sprite is a fast way of rendering a tiling image\n*This is directly exposing [PIXI.TilingSprite](http://www.goodboydigital.com/pixijs/docs/classes/TilingSprite.html)*",
            "extends": "[PIXI.DisplayObjectContainer](http://www.goodboydigital.com/pixijs/docs/classes/DisplayObjectContainer.html)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "the texture of the tiling sprite",
                    "type": "Texture"
                },
                {
                    "name": "width",
                    "description": "the width of the tiling sprite",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the tiling sprite",
                    "type": "Number"
                }
            ]
        },
        "fx.camera.Close": {
            "name": "fx.camera.Close",
            "shortname": "fx.camera.Close",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\fx\\camera\\Close.js",
            "line": 4,
            "description": "Close camera effect. This effect creates a mask on the world that will animated to cover\nthe screen working from the outside-in. It is like a camera shutter \"closing\" around the target",
            "extends": "fx.camera.Effect",
            "is_constructor": 1
        },
        "fx.camera.Effect": {
            "name": "fx.camera.Effect",
            "shortname": "fx.camera.Effect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\fx\\camera\\Effect.js",
            "line": 5,
            "description": "Base camera effect class.",
            "extends": "Container",
            "is_constructor": 1
        },
        "fx.camera.Fade": {
            "name": "fx.camera.Fade",
            "shortname": "fx.camera.Fade",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\fx\\camera\\Fade.js",
            "line": 4,
            "description": "Fade the screen into a color. This will fade into a color that will\neventually cover the screen.",
            "extends": "fx.camera.Effect",
            "is_constructor": 1
        },
        "fx.camera.Flash": {
            "name": "fx.camera.Flash",
            "shortname": "fx.camera.Flash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\fx\\camera\\Flash.js",
            "line": 4,
            "description": "Flash the screen with a color. This will cover the screen in a\ncolor then fade it out.",
            "extends": "fx.camera.Effect",
            "is_constructor": 1
        },
        "fx.camera.Scanlines": {
            "name": "fx.camera.Scanlines",
            "shortname": "fx.camera.Scanlines",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\fx\\camera\\Scanlines.js",
            "line": 5,
            "description": "Adds arcade-style scanlines to the camera viewport.",
            "extends": "fx.camera.Effect",
            "is_constructor": 1
        },
        "fx.camera.Shake": {
            "name": "fx.camera.Shake",
            "shortname": "fx.camera.Shake",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\fx\\camera\\Shake.js",
            "line": 7,
            "description": "Shakes the camera around a bit.",
            "extends": "fx.camera.Effect",
            "is_constructor": 1
        },
        "Game": {
            "name": "Game",
            "shortname": "Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\Game.js",
            "line": 16,
            "description": "Main game object, controls the entire instance of the game",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The container for the new canvas we will create for the game, or the ID of one",
                    "type": "DOMElement|String"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the game instance",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "The width of the viewport",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "The height of the viewport",
                            "type": "Number"
                        },
                        {
                            "name": "renderer",
                            "description": "The renderer to use either RENDERER.AUTO, RENDERER.CANVAS, or RENDERER.WEBGL",
                            "type": "String",
                            "optional": true,
                            "optdefault": "RENDERER.AUTO"
                        },
                        {
                            "name": "transparent",
                            "description": "Should the render element have a transparent background",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "background",
                            "description": "The background color of the stage",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "'#FFF'"
                        },
                        {
                            "name": "antialias",
                            "description": "Anti-alias graphics (in WebGL this helps with edges, in Canvas2D it retains pixel-art quality)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "canvas",
                            "description": "The canvas to render into, if not specified one is created",
                            "type": "DOMElement",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "State": {
            "name": "State",
            "shortname": "State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\State.js",
            "line": 9,
            "description": "States are containers that represent different states of a game",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this state belongs to",
                    "type": "Game"
                },
                {
                    "name": "name",
                    "description": "The name of this state",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "physicsOptions",
                    "description": "All the settings for the physics environment",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "gravity",
                            "description": "The gravity constant for the physics system (default is 9.87, which is normal Earth gravity)",
                            "type": "Vector",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n     var state = game.state.add('battle');\n     state.addChild(battlePlayer);\n     state.addChild(enemy);\n\n     state.enable();"
            ]
        },
        "StateManager": {
            "name": "StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\StateManager.js",
            "line": 4,
            "description": "A state manager is a container for all the states in a game.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game this manager bleongs to.",
                    "type": "Game"
                }
            ]
        },
        "World": {
            "name": "World",
            "shortname": "World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\World.js",
            "line": 8,
            "description": "The world is the container for all game objects in a game state.",
            "extends": "Container",
            "is_constructor": 1
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Circle.js",
            "line": 5,
            "description": "The Circle object is an area defined by its position, as indicated by its\ncenter point (x, y) and by its radius.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "center",
                    "description": "The point of the center of the circle",
                    "type": "Vector"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle",
                    "type": "Number"
                }
            ]
        },
        "Ellipse": {
            "name": "Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Ellipse.js",
            "line": 1,
            "description": "The Ellipse object can be used to specify a hit area for displayobjects\nsee [PIXI.Ellipse](http://www.goodboydigital.com/pixijs/docs/classes/Ellipse.html)\nfor more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall height of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall width of this ellipse",
                    "type": "Number"
                }
            ]
        },
        "Polygon": {
            "name": "Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Polygon.js",
            "line": 5,
            "description": "A *convex* clockwise Polygon.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X origin of the polygon, all X coords for all points are relative to this",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y origin of the polygon, all Y coords for all points are relative to this",
                    "type": "Number"
                },
                {
                    "name": "points",
                    "description": "This can be an array of Vectors that form the polygon,\n     a flat array of numbers that will be interpreted as [x,y, x,y, ...]",
                    "type": "Array<Vector>|Array<Number>"
                },
                {
                    "name": "scale",
                    "description": "The scale of the polygon",
                    "type": "Number"
                }
            ]
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Rectangle.js",
            "line": 9,
            "description": "The Rectangle object is an area defined by its position, as indicated by its\ntop-left corner point (x, y) and by its width and its height.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall wisth of this rectangle",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall height of this rectangle",
                    "type": "Number"
                }
            ]
        },
        "GuiItem": {
            "name": "GuiItem",
            "shortname": "GuiItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\GuiItem.js",
            "line": 4,
            "description": "The base GuiItem that represents an element of a gui on the screen.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to set the sprite to",
                    "type": "Texture"
                },
                {
                    "name": "interactive",
                    "description": "Whether this item should repsond to mouse events",
                    "type": "Boolean"
                }
            ]
        },
        "GamepadButtons": {
            "name": "GamepadButtons",
            "shortname": "GamepadButtons",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 4,
            "description": "Controls gamepad button input",
            "extends": "Input",
            "is_constructor": 1
        },
        "GamepadSticks": {
            "name": "GamepadSticks",
            "shortname": "GamepadSticks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 4,
            "description": "Controls gamepad stick input",
            "extends": "Input",
            "is_constructor": 1
        },
        "Pointer": {
            "name": "Pointer",
            "shortname": "Pointer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 6,
            "description": "Represents a single pointer input method",
            "extends": "Input",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The identifier for this pointer",
                    "type": "String|Number"
                },
                {
                    "name": "manager",
                    "description": "The pointer manager for this pointer instance",
                    "type": "Pointers"
                }
            ]
        },
        "Gamepad": {
            "name": "Gamepad",
            "shortname": "Gamepad",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Gamepad.js",
            "line": 6,
            "description": "Controls input from gamepads",
            "extends": "Input",
            "is_constructor": 1
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Input.js",
            "line": 4,
            "description": "The base Input object, holds common functions and properties between input types",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "InputManager": {
            "name": "InputManager",
            "shortname": "InputManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\InputManager.js",
            "line": 6,
            "description": "Manages all input handlers in a unified way",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Keyboard.js",
            "line": 4,
            "description": "Controls keyboard input",
            "extends": "Input",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "Pointers": {
            "name": "Pointers",
            "shortname": "Pointers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Pointers.js",
            "line": 5,
            "description": "Controls pointer input (mouse, touch, pen, etc) or all pointers tracked by the game",
            "extends": "Input",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "Loader": {
            "name": "Loader",
            "shortname": "Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\loader\\Loader.js",
            "line": 10,
            "description": "The Loader loads and parses different game assets, such as sounds, textures,\nTMX World files (exported from the [Tiled Editor](http://mapeditor.org)),\nand Sprite Atlas files (published from [Texture Packer](http://www.codeandweb.com/texturepacker)).",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Game instance this belongs to",
                    "type": "Game"
                }
            ]
        },
        "Vector": {
            "name": "Vector",
            "shortname": "Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\math\\Vector.js",
            "line": 3,
            "description": "A 2d Vector implementation stolen directly from mrdoob's THREE.js\n[Vector2d](https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js)",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ]
        },
        "math": {
            "name": "math",
            "shortname": "math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\math\\math.js",
            "line": 4,
            "description": "The grapefruit math library, used to abstract commonly used math operations",
            "extends": "Object",
            "static": 1
        },
        "ParticleEmitter": {
            "name": "ParticleEmitter",
            "shortname": "ParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 9,
            "description": "The ParticleEmitter is the object that is placed in the world and will fire off particles based\non the rules and properties set on it. Generally you will want to create/use these by adding\nthem to a ParticleSystem.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The string name of the particle emitter.",
                    "type": "String"
                }
            ]
        },
        "ParticleSystem": {
            "name": "ParticleSystem",
            "shortname": "ParticleSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\particles\\ParticleSystem.js",
            "line": 5,
            "description": "The ParticleSystem controls the system of particle emitters and their particles. It contains all the emitters\nand updates them each frame. An instance of this is created for you in a world instance, which is a property\nof a game state. The general usage for this class is:",
            "extends": "Container",
            "is_constructor": 1
        },
        "PhysicsSystem": {
            "name": "PhysicsSystem",
            "shortname": "PhysicsSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 9,
            "description": "The PhysicsSystem is the wrapper around the chipmunk-js physics library that integrates\ngrapefruit objects into the physics world. It is in charge of managing objects in the physics\nspace. Generally you would not create this yourself and instead would use the `.physics` property\nof a State.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The state instance this system belongs to.",
                    "type": "State"
                },
                {
                    "name": "options",
                    "description": "The options for the physics system.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "[options.gravity=new",
                    "description": "Vector(0, 9.87)]  The gravity of the space",
                    "type": "Vector"
                }
            ]
        },
        "PhysicsTarget": {
            "name": "PhysicsTarget",
            "shortname": "PhysicsTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Container",
                "Sprite"
            ],
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 3,
            "description": "Physics mixin. This will add physics capabilities to the class it mixes into.",
            "is_constructor": 1
        },
        "BitmapText": {
            "name": "BitmapText",
            "shortname": "BitmapText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\text\\BitmapText.js",
            "line": 11,
            "description": "A Text Object will create (a) line(s) of text using bitmap font. To split a line you can use \"\\n\", \"\\r\" or \"\\r\\n\"\nYou can generate the fnt files using [bmfont](http://www.angelcode.com/products/bmfont/) for windows or\n[bmglyph](http://www.bmglyph.com/) for mac.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "The font data object (this is generally grabbed from `game.cache.getBitmapFont('mykey')`);",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The name of the font",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The base size of the font",
                            "type": "Number"
                        },
                        {
                            "name": "lineHeight",
                            "description": "The line height of the font",
                            "type": "Number"
                        },
                        {
                            "name": "chars",
                            "description": "The characters in the font, each should have a texture and kerning info",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "The font size of the text, overrides the font's size",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        }
                    ]
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\text\\Text.js",
            "line": 1,
            "description": "A Text Object will create a line(s) of text to split a line you can use \"\\n\"\nsee <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Text.html\">PIXI.Text</a>\nfor more information.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "font",
                            "description": "default \"bold 20pt Arial\" The style and size of the font",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fill",
                            "description": "A canvas fillstyle that will be used on the text eg \"red\", \"#00FF00\"",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "\"black\""
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "stroke",
                            "description": "A canvas fillstyle that will be used on the text stroke eg \"blue\", \"#FCFF00\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "strokeThickness",
                            "description": "A number that represents the thickness of the stroke. Default is 0 (no stroke)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "wordWrap",
                            "description": "Indicates if word wrap should be used",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "wordWrapWidth",
                            "description": "The width at which text will wrap",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ]
        },
        "ObjectGroup": {
            "name": "ObjectGroup",
            "shortname": "ObjectGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 10,
            "description": "Tiled object group is a special layer that contains entities\nTODO: This is all trash",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "The tilemap instance that this belongs to",
                    "type": "Tilemap"
                },
                {
                    "name": "group",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "Tile": {
            "name": "Tile",
            "shortname": "Tile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tile.js",
            "line": 4,
            "description": "Base Tile implementation, a tile is a single tile in a tilemap layer",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture of the tile",
                    "type": "Texture"
                }
            ]
        },
        "Tilelayer": {
            "name": "Tilelayer",
            "shortname": "Tilelayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 11,
            "description": "The Tilelayer is the visual tiled layer that actually displays on the screen\n\nThis class will be created by the Tilemap, there shouldn't be a reason to\ncreate an instance on your own.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "The tilemap instance that this belongs to",
                    "type": "Tilemap"
                },
                {
                    "name": "layer",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "Tilemap": {
            "name": "Tilemap",
            "shortname": "Tilemap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tilemap.js",
            "line": 10,
            "description": "Tiled map that represents an entire tile map with multiple layers or object groups.\nOften it is easier to create a tilemap using the object factor on a world, rather\nthan doing it manually yourself.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The game state the map belongs to",
                    "type": "State"
                },
                {
                    "name": "map",
                    "description": "All the settings for the map",
                    "type": "Object"
                },
                {
                    "name": "tilesetTextures",
                    "description": "An object whose keys are the tileset name,\n     and whose values are the textures for the tileset. For example:\n     `{ tileset1: new Texture(), ... }`",
                    "type": "Object"
                }
            ]
        },
        "Tileset": {
            "name": "Tileset",
            "shortname": "Tileset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tileset.js",
            "line": 8,
            "description": "This object represents a tileset used by a Tilemap.\nThere can be multiple Tilesets in a map",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to use for the tileset",
                    "type": "Texture"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the tileset",
                    "type": "Object",
                    "props": [
                        {
                            "name": "tilewidth",
                            "description": "The width of a single tile in the set",
                            "type": "Number"
                        },
                        {
                            "name": "tileheight",
                            "description": "The height of a single tile in the set",
                            "type": "Number"
                        },
                        {
                            "name": "firstgid",
                            "description": "The id of the first tile in the set, defaults to 1",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "spacing",
                            "description": "The spacing around tiles in the tileset (in pixels)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "margin",
                            "description": "The margin around a tile in the tileset (in pixels)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "tileoffset",
                            "description": "The offset to apply to a tile rendered from this tileset",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The X offset to apply to the tile",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "y",
                                    "description": "The Y offset to apply to the tile",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                }
                            ]
                        },
                        {
                            "name": "properties",
                            "description": "User-defined, custom properties that apply to the tileset",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "tileproperties",
                            "description": "User-defined, custom properties that apply to tiles in the tileset.\n         The keys of this object should the tile id of the properties",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "imagewidth",
                            "description": "An override for the image width",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "imageheight",
                            "description": "An override for the image height",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Cache": {
            "name": "Cache",
            "shortname": "Cache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Cache.js",
            "line": 11,
            "description": "A game only has one instance of a Cache and it is used to store all externally loaded assets such\nas images, sounds and data files as a result of Loader calls. Cache items use string based keys for look-up.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this cache belongs to",
                    "type": "Game"
                }
            ]
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Clock.js",
            "line": 3,
            "description": "High performance clock, based on mrdoob's\n[Three.js clock](https://github.com/mrdoob/three.js/blob/master/src/core/Clock.js),\nbut with tweaks.",
            "extends": "Object",
            "is_constructor": 1
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "AudioPlayer",
                "BaseTexture",
                "Container",
                "Sprite",
                "Texture",
                "Game",
                "Input",
                "Loader"
            ],
            "file": "src\\utils\\EventEmitter.js",
            "line": 1,
            "description": "Event emitter mixin. This will add emitter properties to an object so that\nit can emit events, and have others listen for them. Based on\n[node.js event emitter](https://github.com/joyent/node/blob/master/lib/events.js)",
            "is_constructor": 1
        },
        "ObjectFactory": {
            "name": "ObjectFactory",
            "shortname": "ObjectFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\ObjectFactory.js",
            "line": 9,
            "description": "The object factory makes it simple to create and add objects to a parent. One is added\nto a State's world and camera by default, but they can be used for any parent but they\ncan only belong to a single state.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The game state this factory belongs to",
                    "type": "State"
                },
                {
                    "name": "parent",
                    "description": "The container to act as the parent for created objects",
                    "type": "Container"
                }
            ]
        },
        "ObjectPool": {
            "name": "ObjectPool",
            "shortname": "ObjectPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\ObjectPool.js",
            "line": 3,
            "description": "Holds a pool of different Objects to help reduce the number times\nan object is created and destroyed.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The object type that this pool will hold (like Sprite, or Tile)",
                    "type": "Mixed"
                },
                {
                    "name": "parent",
                    "description": "The parent that the objects will be added to. Passing this in will\n     make the pool add any newly created objects as children to this object.",
                    "type": "Mixed"
                }
            ]
        },
        "SpritePool": {
            "name": "SpritePool",
            "shortname": "SpritePool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\SpritePool.js",
            "line": 4,
            "description": "Holds a pool of different Sprites that can be created, makes it very\neasy to quickly create different registered entities",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this sprite pool belongs to",
                    "type": "Game"
                }
            ]
        },
        "support": {
            "name": "support",
            "shortname": "support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\support.js",
            "line": 1,
            "description": "Holds the results of the feature detection run on the browser, to make it simple to\nsee which features the library can use.",
            "extends": "Object",
            "static": 1
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\utils.js",
            "line": 6,
            "description": "The grapefruit utility object, used for misc functions used throughout the code base",
            "extends": "Object",
            "static": 1
        },
        "RENDERER": {
            "name": "RENDERER",
            "shortname": "RENDERER",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 2,
            "description": "The types of renderers supported. These are generally passed in to the constructor of\na {{#crossLink \"Game\"}}{{/crossLink}} instance.",
            "static": 1,
            "final": 1
        },
        "FILE_FORMAT": {
            "name": "FILE_FORMAT",
            "shortname": "FILE_FORMAT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 43,
            "description": "The types of files that the loader supports for types that have multiple formats (like tilemaps).",
            "static": 1,
            "final": 1
        },
        "ATLAS_FORMAT": {
            "name": "ATLAS_FORMAT",
            "shortname": "ATLAS_FORMAT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 83,
            "description": "The types of texture atlas file formats that the loader supports.",
            "static": 1,
            "final": 1
        },
        "CAMERA_FOLLOW": {
            "name": "CAMERA_FOLLOW",
            "shortname": "CAMERA_FOLLOW",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 123,
            "description": "The follow types that the camera can execute",
            "static": 1,
            "final": 1
        },
        "AXIS": {
            "name": "AXIS",
            "shortname": "AXIS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 174,
            "description": "These represent different axis. They are bitwise flags and can be combined together.",
            "static": 1,
            "final": 1
        },
        "DIRECTION": {
            "name": "DIRECTION",
            "shortname": "DIRECTION",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 224,
            "description": "These represent different directions in the world. They are bitwise flags and can be combined together.",
            "static": 1,
            "final": 1
        },
        "pkg": {
            "name": "pkg",
            "shortname": "pkg",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\constants.js",
            "line": 303,
            "description": "The pkg object contains all the grapefruit package information from package.json,\ninserted at build time.",
            "static": 1,
            "final": 1
        },
        "plugin": {
            "name": "plugin",
            "shortname": "plugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\plugin.js",
            "line": 2,
            "description": "Provides methods for patching core functions, and registering plugins.",
            "extends": "Object"
        }
    },
    "classitems": [
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 22,
            "description": "The game instance this manager belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 30,
            "description": "The parent for this audio manager",
            "itemtype": "property",
            "name": "parent",
            "type": "AudioManager",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 38,
            "description": "Whether the player is muted or not",
            "itemtype": "property",
            "name": "muted",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 48,
            "description": "The master volume of the player",
            "itemtype": "property",
            "name": "_volume",
            "type": "Number",
            "default": "1",
            "access": "private",
            "tagname": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 58,
            "description": "The master volume of all the audio playing",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "default": "1",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 70,
            "description": "The Web Audio API context if we are using it",
            "itemtype": "property",
            "name": "ctx",
            "type": "AudioContext",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 79,
            "description": "If we have some way of playing audio",
            "itemtype": "property",
            "name": "canPlay",
            "type": "Boolean",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 100,
            "description": "Returns the current master volume",
            "itemtype": "method",
            "name": "getVolume",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 108,
            "description": "Sets the current master volume",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 135,
            "description": "Mutes all playing audio",
            "itemtype": "method",
            "name": "mute",
            "return": {
                "description": "Returns itself.",
                "type": "AudioManager"
            },
            "chainable": 1,
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 145,
            "description": "Unmutes all playing audio",
            "itemtype": "method",
            "name": "unmute",
            "return": {
                "description": "Returns itself.",
                "type": "AudioManager"
            },
            "chainable": 1,
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 155,
            "description": "Sets whether or not this manager is muted",
            "itemtype": "method",
            "name": "setMuted",
            "return": {
                "description": "Returns itself.",
                "type": "AudioManager"
            },
            "chainable": 1,
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 181,
            "description": "Sets the parent of this audio manager, if using webAudio this\nmeans that we connect to the parent masterGain node and inherit\nanything that happens to it (such as muting).",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "parent",
                    "description": "The parent to connect to, or `null` to connect to the global context",
                    "type": "AudioManager"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioManager"
            },
            "chainable": 1,
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 207,
            "description": "Attaches an AudioPlayer to this manager, if using webAudio this means\nthat the sound will connect to this masterGain node and inherit anything\nthat happens to it (such as muting).",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "sound",
                    "description": "The player to attach to this manager",
                    "type": "AudioPlayer"
                }
            ],
            "return": {
                "description": "The newly attached audio player",
                "type": "AudioPlayer"
            },
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 234,
            "description": "Detaches an AudioPlayer from this manager, if using webAudio this means\nthat the sound will disconnect from this masterGain node and stop inheriting\nanything that happens to it (such as muting).",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "sound",
                    "description": "The player to detach from this manager",
                    "type": "AudioPlayer"
                }
            ],
            "return": {
                "description": "The detached audio player",
                "type": "AudioPlayer"
            },
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 257,
            "description": "Creates a new audio player for a peice of audio",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded audio",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the audio player",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "volume",
                            "description": "The volume of this audio clip",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "autoplay",
                            "description": "Automatically start playing after loaded",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "loop",
                            "description": "Replay the audio when it finishes",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "sprite",
                            "description": "A map of string names -> [start, duration] arrays. You can use it to put multiple sounds in one file",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "pos3d",
                            "description": "3D coords of where the audio should sound as if it came from (only works with WebAudio)",
                            "type": "Array<Number>",
                            "optional": true
                        },
                        {
                            "name": "buffer",
                            "description": "WebAudio will load the entire file before playing, making this true forces HTML5Audio which will buffer and play",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "format",
                            "description": "Force an extension override",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Will return the new audio player, or false if we couldn't determine a compatible url",
                "type": "AudioPlayer"
            },
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 285,
            "description": "Removes an audio player from the manager",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded audio",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Will return the audio player removed, or false if none was removed",
                "type": "AudioPlayer"
            },
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 30,
            "description": "The source of the audio, the actual URL to load up",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 38,
            "description": "The game instance this player belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 46,
            "description": "The cache key that uniquely identifies this piece of audio",
            "itemtype": "property",
            "name": "key",
            "type": "String",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 54,
            "description": "Play the audio immediately after loading",
            "itemtype": "property",
            "name": "autoplay",
            "type": "Boolean",
            "default": "false",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 63,
            "description": "Override the format determined from the extension with this extension",
            "itemtype": "property",
            "name": "format",
            "type": "String",
            "default": "null",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 72,
            "description": "Replay the audio immediately after finishing",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "false",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 81,
            "description": "A 3D position where the audio should sound like it is coming from",
            "itemtype": "property",
            "name": "pos3d",
            "type": "Array<Number>",
            "default": "[0, 0, -0.5]",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 90,
            "description": "A sound sprite that maps string keys to [start, duration] arrays. These can\nbe used to put multiple sound bits in one file, and play them separately",
            "itemtype": "property",
            "name": "sprite",
            "type": "Object",
            "default": "{}",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 100,
            "description": "The volume of the audio player",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "default": "1",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 112,
            "description": "The preloaded audio file object",
            "itemtype": "property",
            "name": "_file",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 121,
            "description": "The current volume of the player",
            "itemtype": "property",
            "name": "_volume",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 130,
            "description": "The full duration of the file to play",
            "itemtype": "property",
            "name": "_duration",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 139,
            "description": "Has this player data been loaded?",
            "itemtype": "property",
            "name": "_loaded",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 148,
            "description": "The manager of the player",
            "itemtype": "property",
            "name": "_volum_manager",
            "type": "AudioManager",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 157,
            "description": "Does the browser support WebAudio API",
            "itemtype": "property",
            "name": "_webAudio",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 166,
            "description": "The actual player nodes, these are either WebAudio Nodes\nor HTML5 Audio elements.",
            "itemtype": "property",
            "name": "_nodes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 176,
            "description": "Array of timeouts to track end events",
            "itemtype": "property",
            "name": "_onendTimer",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 194,
            "description": "Fired when the player is ready to play",
            "itemtype": "event",
            "name": "ready",
            "params": [
                {
                    "name": "source",
                    "description": "The source URL that will be used as the audio source",
                    "type": "String"
                }
            ],
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 201,
            "description": "Fired when audio starts playing",
            "itemtype": "event",
            "name": "play",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the node that is used to play the audio",
                    "type": "String"
                }
            ],
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 208,
            "description": "Fired when audio is paused",
            "itemtype": "event",
            "name": "paused",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the node that is paused",
                    "type": "String"
                }
            ],
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 215,
            "description": "Fired when audio finishes playing",
            "itemtype": "event",
            "name": "end",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the node that has finished playing",
                    "type": "String"
                }
            ],
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 224,
            "description": "Load the audio file for this player, this is called from the ctor\nthere is no reason to call it manually.",
            "itemtype": "method",
            "name": "_load",
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 281,
            "description": "Play a sound from the current time (0 by default).",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "sprite",
                    "description": "Plays from the specified position in the sound sprite definition.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Returns the unique playback id for this sound instance.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 412,
            "description": "Pause playback and save the current position.",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "timerId",
                    "description": "Clear the correct timeout ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 461,
            "description": "Stop playback and reset to start.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "timerId",
                    "description": "Clear the correct timeout ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 508,
            "description": "Mute this sound.",
            "itemtype": "method",
            "name": "mute",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 519,
            "description": "Unmute this sound.",
            "itemtype": "method",
            "name": "unmute",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 530,
            "description": "Set the muted state of this sound.",
            "itemtype": "method",
            "name": "setMuted",
            "params": [
                {
                    "name": "muted",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 562,
            "description": "Set the position of playback.",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "pos",
                    "description": "The position to move current playback to.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 599,
            "description": "Get the position of playback.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 629,
            "description": "Fade a currently playing sound between two volumes.",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "from",
                    "description": "The volume to fade from (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "The volume to fade to (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "Time in milliseconds to fade.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Fired when the fade is complete.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 672,
            "description": "Returns the current volume of the player",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The current volume",
                "type": "Number"
            },
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 681,
            "description": "Sets the current volume of the player",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "vol",
                    "description": "The current volume",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 721,
            "description": "Set the 3D position of the audio source.\nThe most common usage is to set the 'x' position\nto affect the left/right ear panning. Setting any value higher than\n1.0 will begin to decrease the volume of the sound as it moves further away.\nNOTE: This only works with Web Audio API, HTML5 Audio playback\nwill not be affected.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The x-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The z-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "AudioPlayer"
            },
            "chainable": 1,
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 766,
            "description": "Performs a step in the fade transition",
            "itemtype": "method",
            "name": "_doFadeStep",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 784,
            "description": "Get an audio node by ID.",
            "itemtype": "method",
            "name": "_nodeById",
            "return": {
                "description": "Audio node.",
                "type": "AudioPlayer"
            },
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 804,
            "description": "Get the first active audio node.",
            "itemtype": "method",
            "name": "_activeNode",
            "return": {
                "description": "Audio node.",
                "type": "AudioPlayer"
            },
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 827,
            "description": "Get the first inactive audio node.\nIf there is none, create a new one and add it to the pool.",
            "itemtype": "method",
            "name": "_inactiveNode",
            "params": [
                {
                    "name": "cb",
                    "description": "callback Function to call when the audio node is ready.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 863,
            "description": "If there are more than 5 inactive audio nodes in the pool, clear out the rest.",
            "itemtype": "method",
            "name": "_drainPool",
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 891,
            "description": "Clear 'onend' timeout before it ends.",
            "itemtype": "method",
            "name": "_clearEndTimer",
            "params": [
                {
                    "name": "timerId",
                    "description": "timerId The ID of the sound to be cancelled.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 909,
            "description": "Setup the gain node and panner for a Web Audio instance.",
            "itemtype": "method",
            "name": "_setupAudioNode",
            "return": {
                "description": "The new audio node.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 935,
            "description": "Finishes loading the Web Audio API sound and fires the loaded event",
            "itemtype": "method",
            "name": "loadSound",
            "params": [
                {
                    "name": "buffer",
                    "description": "The decoded buffer sound source.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 959,
            "description": "Load the sound back into the buffer source.",
            "itemtype": "method",
            "name": "refreshBuffer",
            "params": [
                {
                    "name": "loop",
                    "description": "Loop boolean, pos, and duration.",
                    "type": "Array"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudioPlayer"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 28,
            "description": "The world instance this camera is tied to",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 36,
            "description": "The game instance this camera belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 44,
            "description": "The game state this camera belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "State",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 52,
            "description": "The bounds of that the camera can move to",
            "itemtype": "property",
            "name": "bounds",
            "type": "Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 62,
            "description": "When following a sprite this is the space within the camera that it can move around\nbefore the camera moves to track it.",
            "itemtype": "property",
            "name": "_deadzone",
            "type": "Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 73,
            "description": "The target that the camera will follow",
            "itemtype": "property",
            "name": "_target",
            "type": "Sprite",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 83,
            "description": "The target's last position, to cache if we should try to move the camera or not",
            "itemtype": "property",
            "name": "_targetPos",
            "type": "Vector",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 93,
            "description": "The size of the camera",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 102,
            "description": "Half of the size of the camera",
            "itemtype": "property",
            "name": "hSize",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 111,
            "description": "The container that holds all the GUI items, direct children of Camera are effects",
            "itemtype": "property",
            "name": "gui",
            "type": "Container",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 120,
            "description": "An object factory for creating game objects",
            "itemtype": "property",
            "name": "add",
            "type": "ObjectFactory",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 128,
            "description": "The fxpools for doing camera effects",
            "itemtype": "property",
            "name": "fxpools",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 144,
            "description": "Flash the screen with a color. This will cover the screen in a\ncolor then fade it out.",
            "itemtype": "method",
            "name": "flash",
            "params": [
                {
                    "name": "color",
                    "description": "The color to flash the screen with",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0xFFFFFF"
                },
                {
                    "name": "duration",
                    "description": "The time it should take (in milliseconds) to fade out",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "alpha",
                    "description": "The opacity of the initial flash of color (start opacity)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The close effect that was created.",
                "type": "fx.camera.Flash"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 156,
            "description": "Fade the screen into a color. This will fade into a color that will\neventually cover the screen.",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "color",
                    "description": "The color to fade into",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0xFFFFFF"
                },
                {
                    "name": "duration",
                    "description": "The time it should take (in milliseconds) to fade in",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "alpha",
                    "description": "The opacity to fade into (final opacity)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The close effect that was created.",
                "type": "fx.camera.Fade"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 168,
            "description": "Shakes the camera around a bit.",
            "itemtype": "method",
            "name": "shake",
            "params": [
                {
                    "name": "intensity",
                    "description": "The intensity of the shaking",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.01"
                },
                {
                    "name": "duration",
                    "description": "The amount of time the screen shakes for (in milliseconds)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "direction",
                    "description": "The axis to shake on",
                    "type": "gf.AXIS",
                    "optional": true,
                    "optdefault": "gf.AXIS.BOTH"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The close effect that was created.",
                "type": "fx.camera.Shake"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 179,
            "description": "Adds arcade-style scanlines to the camera viewport.",
            "itemtype": "method",
            "name": "scanlines - color, axis, spacing, thickness, alpha, cb",
            "params": [
                {
                    "name": "color",
                    "description": "The color for the scanlines to be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0x000000"
                },
                {
                    "name": "axis",
                    "description": "The axis to draw the lines on",
                    "type": "gf.AXIS",
                    "optional": true,
                    "optdefault": "gf.AXIS.HORIZONTAL"
                },
                {
                    "name": "spacing",
                    "description": "Number of pixels between each line",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "thickness",
                    "description": "Number of pixels thick each line is",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "alpha",
                    "description": "The opacity of the lines",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.3"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The close effect that was created.",
                "type": "fx.camera.Scanlines"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 192,
            "description": "Performs a \"close\" animation that will cover the screen with a color.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to close with, can be either 'ellipse', 'circle', or 'rectangle'",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'circle'"
                },
                {
                    "name": "duration",
                    "description": "Number of milliseconds for the animation to complete",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "position",
                    "description": "The position for the animation to close in on, defaults to camera center",
                    "type": "Vector",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The close effect that was created.",
                "type": "fx.camera.Close"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 227,
            "description": "The base callback for camera FX. This is called at the end of each aniamtion to\nfree the FX class back into the pool.",
            "itemtype": "method",
            "name": "_fxCallback",
            "params": [
                {
                    "name": "fx",
                    "description": "The FX instance to free",
                    "type": "Mixed"
                },
                {
                    "name": "type",
                    "description": "The name of the instance type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The user callback to call.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 247,
            "description": "Follows an sprite with the camera, ensuring they are always center view. You can\npass a follow style to change the area an sprite can move around in before we start\nto move with them.",
            "itemtype": "method",
            "name": "follow",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to follow",
                    "type": "Sprite"
                },
                {
                    "name": "style",
                    "description": "The style of following",
                    "type": "CAMERA_FOLLOW",
                    "optional": true,
                    "optdefault": "CAMERA_FOLLOW.LOCKON"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 305,
            "description": "Stops following any sprites",
            "itemtype": "method",
            "name": "unfollow",
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 317,
            "description": "Focuses the camera on a sprite.",
            "itemtype": "method",
            "name": "focusSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to focus on",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 344,
            "description": "Focuses the camera on an x,y position. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "focus",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to focus on, if a Vector is passed the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y coord to focus on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 366,
            "description": "Pans the camera around by the x,y amount. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 410,
            "description": "Checks if a point is outside the bounds of the camera constraints.",
            "itemtype": "method",
            "name": "_outsideBounds",
            "params": [
                {
                    "name": "x",
                    "description": "The new X position to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new Y position to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the camera will move outside bounds to go to this point",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 428,
            "description": "Resizes the viewing area, this is called internally by your game instance\nwhen you call mygame.resize(). DO NOT CALL THIS DIRECTLY",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "The new width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The new height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 448,
            "description": "Sets the bounds the camera is allowed to go. Usually this is the world's\nsize unless you set it manually.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to constrain the camera into",
                    "type": "Rectangle|Polygon|Circle|Ellipse"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 462,
            "description": "Removes the constraints of the camera, to allow free movement around the world",
            "itemtype": "method",
            "name": "unconstrain",
            "return": {
                "description": "Returns itself.",
                "type": "Camera"
            },
            "chainable": 1,
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 474,
            "description": "Called internally every frame. Updates all effects and the follow",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The delta time (in seconds) since the last update",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 29,
            "description": "[read-only] The of children of this object.",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "readonly": "",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 35,
            "description": "The coordinate of the object relative to the local coordinates of the parent.",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 42,
            "description": "The scale factor of the object.",
            "itemtype": "property",
            "name": "scale",
            "type": "Point",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 49,
            "description": "The rotation of the object in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 56,
            "description": "The opacity of the object.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 63,
            "description": "The visibility of the object.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 70,
            "description": "[read-only] The display object that contains this display object.",
            "itemtype": "property",
            "name": "parent",
            "type": "DisplayObject",
            "readonly": "",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 78,
            "description": "[read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.",
            "itemtype": "property",
            "name": "stage",
            "type": "Stage",
            "readonly": "",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 86,
            "description": "This is the defined area that will pick up mouse / touch events. It is null by default.\nSetting it is a neat way of optimising the hitTest function that the interactionManager\nwill use (as it will not need to hit test all the children)",
            "itemtype": "property",
            "name": "hitArea",
            "type": "Rectangle|Polygon|Circle|Ellipse",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 95,
            "description": "Wether or not the object will handle mouse events",
            "itemtype": "property",
            "name": "interactive",
            "type": "Boolean",
            "default": "false",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 105,
            "description": "Sets the container to visible = true",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "Returns itself.",
                "type": "Container"
            },
            "chainable": 1,
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 116,
            "description": "Sets the container to visible = false",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "Returns itself.",
                "type": "Container"
            },
            "chainable": 1,
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 127,
            "description": "Adds a child to the container and returns the child",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 140,
            "description": "Adds a child to the object at a specified index. If the index is out of bounds an error will be thrown",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 154,
            "description": "Removes a child from the object.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 167,
            "description": "Removes all children from the object.",
            "itemtype": "method",
            "name": "removeAllChildren",
            "return": {
                "description": "Returns itself.",
                "type": "Container"
            },
            "chainable": 1,
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 182,
            "description": "Brings a child to the top of the Z pile.",
            "itemtype": "method",
            "name": "bringChildToTop",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 197,
            "description": "Destroys this object.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 210,
            "description": "Destroys all the children of the object.",
            "itemtype": "method",
            "name": "destroyAllChildren",
            "return": {
                "description": "Returns itself.",
                "type": "Container"
            },
            "chainable": 1,
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 229,
            "description": "Called whenever a collision occurs",
            "itemtype": "method",
            "name": "onCollide",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite that you collide with",
                    "type": "Sprite|Container"
                },
                {
                    "name": "collision",
                    "description": "Collision data object that contains\n     information about the intersection",
                    "type": "Collision"
                }
            ],
            "return": {
                "description": "If you return `false` explicitly the engine will *not*\n     solve the collision. In this way you can make thing \"not collide\" if\n     you don't want their types to collide.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 260,
            "description": "A callback that is used when the users clicks on the displayObject with their mouse",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 267,
            "description": "A callback that is used when the user clicks the mouse down over the displayObject",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 274,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject\nfor this callback to be fired the mouse must have been pressed down over the displayObject",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 282,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject but is no longer over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "event",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 290,
            "description": "A callback that is used when the users mouse rolls over the displayObject",
            "itemtype": "event",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 297,
            "description": "A callback that is used when the users mouse leaves the displayObject",
            "itemtype": "event",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 304,
            "description": "A callback that is used when the user moves the mouse while over the displayObject",
            "itemtype": "event",
            "name": "mousemove",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 315,
            "description": "A callback that is used when the users taps on the displayObject with their finger\nbasically a touch version of click",
            "itemtype": "event",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 323,
            "description": "A callback that is used when the user touch's over the displayObject",
            "itemtype": "event",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 330,
            "description": "A callback that is used when the user releases a touch over the displayObject",
            "itemtype": "event",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 337,
            "description": "A callback that is used when the user releases the touch that was over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "event",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 60,
            "description": "The name of the sprite",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 69,
            "description": "The lifetime of the sprite. Once it reaches 0 (after being set)\nthe sprite's visible property is set to false, so that it will\nno longer be rendered. NOT YET IMPLEMENTED",
            "itemtype": "property",
            "name": "lifetime",
            "type": "Number",
            "default": "Infinity",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 81,
            "description": "The animation speed for this sprite",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "default": "1",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 90,
            "description": "Whether or not to loop the animations. This can be overriden\non a per-animation level",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 100,
            "description": "The registerd animations for this AnimatedSprite",
            "itemtype": "property",
            "name": "animations",
            "type": "Object",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 109,
            "description": "The currently playing animation",
            "itemtype": "property",
            "name": "currentAnimation",
            "type": "String",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 118,
            "description": "The current frame being shown",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 127,
            "description": "Whether or not the animation is currently playing",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 141,
            "description": "Fired when a new frame of the running animation is shown",
            "itemtype": "event",
            "name": "frame",
            "params": [
                {
                    "name": "animation",
                    "description": "The animation name that is playing",
                    "type": "String"
                },
                {
                    "name": "frameId",
                    "description": "The frame that is being shown",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 149,
            "description": "Fired when the running animation completes",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "animation",
                    "description": "The animation that has completed",
                    "type": "String"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 158,
            "description": "Sets the sprite to visible = true",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "Returns itself.",
                "type": "Sprite"
            },
            "chainable": 1,
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 169,
            "description": "Sets the sprite to visible = false",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "Returns itself.",
                "type": "Sprite"
            },
            "chainable": 1,
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 180,
            "description": "Creates a new Sprite instance with the same values as this one",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Returns the new sprite",
                "type": "Sprite"
            },
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 233,
            "description": "Adds a new animation to this animated sprite",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The string name of the animation",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "The array of texture frames",
                    "type": "Array<Texture>"
                },
                {
                    "name": "speed",
                    "description": "The animation speed",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "loop",
                    "description": "Loop the animation or not",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Sprite"
            },
            "chainable": 1,
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 258,
            "description": "Goes to a frame and starts playing the animation from there. You can optionally\npass the name of a new aniamtion to start playing.",
            "itemtype": "method",
            "name": "goto",
            "params": [
                {
                    "name": "frame",
                    "description": "The index of the frame to start on",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "The string name of the animation to go to",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Sprite"
            },
            "chainable": 1,
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 286,
            "description": "Starts playing the currently active animation",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "Returns itself.",
                "type": "Sprite"
            },
            "chainable": 1,
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 297,
            "description": "Stops playing the currently active animation",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "Sprite"
            },
            "chainable": 1,
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 308,
            "description": "Removes this sprite from the stage and the physics system",
            "itemtype": "method",
            "name": "destroy",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 330,
            "description": "Called by PIXI to update our textures and do the actual animation",
            "itemtype": "method",
            "name": "updateTransform",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 381,
            "description": "A callback that is used when the users clicks on the sprite with their mouse",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 388,
            "description": "A callback that is used when the user clicks the mouse down over the sprite",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 395,
            "description": "A callback that is used when the user releases the mouse that was over the sprite\nfor this callback to be fired the mouse must have been pressed down over the sprite",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 403,
            "description": "A callback that is used when the user releases the mouse that was over the sprite but is no longer over the sprite\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "event",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 411,
            "description": "A callback that is used when the users mouse rolls over the sprite",
            "itemtype": "event",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 418,
            "description": "A callback that is used when the users mouse leaves the sprite",
            "itemtype": "event",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 425,
            "description": "A callback that is used when the user moves the mouse while over the sprite",
            "itemtype": "event",
            "name": "mousemove",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 436,
            "description": "A callback that is used when the users taps on the sprite with their finger\nbasically a touch version of click",
            "itemtype": "event",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 444,
            "description": "A callback that is used when the user touch's over the sprite",
            "itemtype": "event",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 451,
            "description": "A callback that is used when the user releases a touch over the sprite",
            "itemtype": "event",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 458,
            "description": "A callback that is used when the user releases the touch that was over the sprite\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "event",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\fx\\camera\\Close.js",
            "line": 17,
            "description": "Starts running the effect",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to close with, can be either 'ellipse', 'circle', or 'rectangle'",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'circle'"
                },
                {
                    "name": "duration",
                    "description": "Number of milliseconds for the animation to complete",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "position",
                    "description": "The position for the animation to close in on, defaults to camera center",
                    "type": "Vector",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Close"
            },
            "chainable": 1,
            "class": "fx.camera.Close"
        },
        {
            "file": "src\\fx\\camera\\Close.js",
            "line": 73,
            "description": "Stops running the effect, and removes it from display",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Close"
            },
            "chainable": 1,
            "class": "fx.camera.Close"
        },
        {
            "file": "src\\fx\\camera\\Close.js",
            "line": 91,
            "description": "Called internally by the camera each frame to update the effect",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Close"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "fx.camera.Close"
        },
        {
            "file": "src\\fx\\camera\\Effect.js",
            "line": 15,
            "description": "A graphics instance that can be used by effects to draw",
            "itemtype": "property",
            "name": "gfx",
            "type": "Graphics",
            "class": "fx.camera.Effect"
        },
        {
            "file": "src\\fx\\camera\\Effect.js",
            "line": 24,
            "description": "Whether or not the effect has completed, and is no longer runnning.",
            "itemtype": "property",
            "name": "done",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "fx.camera.Effect"
        },
        {
            "file": "src\\fx\\camera\\Effect.js",
            "line": 36,
            "description": "Starts running the effect",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Called when the animation completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Effect"
            },
            "chainable": 1,
            "class": "fx.camera.Effect"
        },
        {
            "file": "src\\fx\\camera\\Effect.js",
            "line": 49,
            "description": "Stops running the effect",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "Effect"
            },
            "chainable": 1,
            "class": "fx.camera.Effect"
        },
        {
            "file": "src\\fx\\camera\\Effect.js",
            "line": 60,
            "description": "Called internally by the camera each frame to update the effect",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns itself.",
                "type": "Effect"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "fx.camera.Effect"
        },
        {
            "file": "src\\fx\\camera\\Effect.js",
            "line": 71,
            "description": "Called when the effect finishes to call the registered callback (if there is one).\nIf the callback explicitly returns `false` then `.stop()` will not be called. `done`\nwill still be set to `true`but the effect will not be removed from the display.\n\nThis is useful if you want to run an animation and keep the final state active until\nyou manually remove the item with `.stop()`. For example: fading to black then running\nsome async process, then removing the black manually.",
            "itemtype": "method",
            "name": "_complete",
            "access": "private",
            "tagname": "",
            "class": "fx.camera.Effect"
        },
        {
            "file": "src\\fx\\camera\\Fade.js",
            "line": 17,
            "description": "Starts running the effect",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "color",
                    "description": "The color to fade into",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0xFFFFFF"
                },
                {
                    "name": "duration",
                    "description": "The time it should take (in milliseconds) to fade in",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "alpha",
                    "description": "The opacity to fade into (final opacity)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Fade"
            },
            "chainable": 1,
            "class": "fx.camera.Fade"
        },
        {
            "file": "src\\fx\\camera\\Fade.js",
            "line": 61,
            "description": "Stops running the effect, and removes it from display",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Fade"
            },
            "chainable": 1,
            "class": "fx.camera.Fade"
        },
        {
            "file": "src\\fx\\camera\\Fade.js",
            "line": 76,
            "description": "Called internally by the camera each frame to update the effect",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Fade"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "fx.camera.Fade"
        },
        {
            "file": "src\\fx\\camera\\Flash.js",
            "line": 17,
            "description": "Starts running the effect",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "color",
                    "description": "The color to flash the screen with",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0xFFFFFF"
                },
                {
                    "name": "duration",
                    "description": "The time it should take (in milliseconds) to fade out",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "alpha",
                    "description": "The opacity of the initial flash of color (start opacity)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Flash"
            },
            "chainable": 1,
            "class": "fx.camera.Flash"
        },
        {
            "file": "src\\fx\\camera\\Flash.js",
            "line": 61,
            "description": "Stops running the effect, and removes it from display",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Flash"
            },
            "chainable": 1,
            "class": "fx.camera.Flash"
        },
        {
            "file": "src\\fx\\camera\\Flash.js",
            "line": 76,
            "description": "Called internally by the camera each frame to update the effect",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Flash"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "fx.camera.Flash"
        },
        {
            "file": "src\\fx\\camera\\Scanlines.js",
            "line": 17,
            "description": "Starts running the effect",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "color",
                    "description": "The color for the scanlines to be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0x000000"
                },
                {
                    "name": "axis",
                    "description": "The axis to draw the lines on",
                    "type": "gf.AXIS",
                    "optional": true,
                    "optdefault": "gf.AXIS.HORIZONTAL"
                },
                {
                    "name": "spacing",
                    "description": "Number of pixels between each line",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "thickness",
                    "description": "Number of pixels thick each line is",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "alpha",
                    "description": "The opacity of the lines",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.3"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Scanlines"
            },
            "chainable": 1,
            "class": "fx.camera.Scanlines"
        },
        {
            "file": "src\\fx\\camera\\Scanlines.js",
            "line": 97,
            "description": "Stops running the effect, and removes it from display",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Scanlines"
            },
            "chainable": 1,
            "class": "fx.camera.Scanlines"
        },
        {
            "file": "src\\fx\\camera\\Shake.js",
            "line": 20,
            "description": "Starts running the effect",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "intensity",
                    "description": "The intensity of the shaking",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.01"
                },
                {
                    "name": "duration",
                    "description": "The amount of time the screen shakes for (in milliseconds)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "direction",
                    "description": "The axis to shake on",
                    "type": "gf.AXIS",
                    "optional": true,
                    "optdefault": "gf.AXIS.BOTH"
                },
                {
                    "name": "callback",
                    "description": "A callback to call once the animation completes.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Shake"
            },
            "chainable": 1,
            "class": "fx.camera.Shake"
        },
        {
            "file": "src\\fx\\camera\\Shake.js",
            "line": 59,
            "description": "Stops running the effect, and removes it from display",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Shake"
            },
            "chainable": 1,
            "class": "fx.camera.Shake"
        },
        {
            "file": "src\\fx\\camera\\Shake.js",
            "line": 73,
            "description": "Called internally by the camera each frame to update the effect",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns itself.",
                "type": "fx.camera.Shake"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "fx.camera.Shake"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 46,
            "description": "The domElement that we are putting our rendering canvas into (the container)",
            "itemtype": "property",
            "name": "container",
            "type": "DOMELement",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 58,
            "description": "The width of the render viewport",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "800",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 67,
            "description": "The height of the render viewport",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "600",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 76,
            "description": "The method used to render values to the screen (either webgl, or canvas)",
            "itemtype": "property",
            "name": "renderMethod",
            "type": "String",
            "default": "RENDERER.AUTO",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 85,
            "description": "Whether the canvas has a transparent background or not",
            "itemtype": "property",
            "name": "transparent",
            "type": "Boolean",
            "default": "false",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 94,
            "description": "The background of the stage",
            "itemtype": "property",
            "name": "background",
            "type": "Boolean",
            "default": "false",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 103,
            "description": "Anti-alias graphics (in WebGL this helps with edges, in Canvas2D it retains pixel-art quality)",
            "itemtype": "property",
            "name": "antialias",
            "type": "Boolean",
            "default": "true",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 112,
            "description": "The canvas to render into",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 120,
            "description": "Raw rendering engine, the underlying PIXI renderer that draws for us",
            "itemtype": "property",
            "name": "renderer",
            "type": "PIXI.WebGLRenderer|PIXI.CanvasRenderer",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 129,
            "description": "Raw PIXI.stage instance, the root of all things in the scene graph",
            "itemtype": "property",
            "name": "stage",
            "type": "PIXI.Stage",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 138,
            "description": "Clock instance for internal timing",
            "itemtype": "property",
            "name": "clock",
            "type": "Clock",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 147,
            "description": "The audio manager for this game instance, used to play and control\nall the audio in a game.",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioManager",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 157,
            "description": "The loader for this game instance, used to preload assets into the cache",
            "itemtype": "property",
            "name": "loader",
            "type": "Loader",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 166,
            "description": "Cache instance for storing/retrieving assets",
            "itemtype": "property",
            "name": "cache",
            "type": "Cache",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 175,
            "description": "The input instance for this game",
            "itemtype": "property",
            "name": "input",
            "type": "InputManager",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 184,
            "description": "The sprite pool to use to create registered entities",
            "itemtype": "property",
            "name": "spritepool",
            "type": "SpritePool",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 193,
            "description": "The state manager, to switch between game states",
            "itemtype": "property",
            "name": "state",
            "type": "StateManager",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 202,
            "description": "The offset for the viewport in the document",
            "itemtype": "property",
            "name": "offset",
            "type": "Vector",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 211,
            "description": "Holds timing data for the previous loop",
            "itemtype": "property",
            "name": "timings",
            "type": "Object",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 231,
            "description": "Fired each frame after everything has updated, but just before rendering",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds passed since the last tick call (delta time)",
                    "type": "Number"
                }
            ],
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 240,
            "description": "Creates the underlying renderer based on browser support. It will also set's `game.renderMethod` for a user\nto be able to check.",
            "itemtype": "method",
            "name": "_createRenderer",
            "return": {
                "description": "The renderer to use",
                "type": "PIXI.WebGLRenderer|PIXI.CanvasRenderer"
            },
            "access": "private",
            "tagname": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 279,
            "description": "Allows you to resize the game area.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width to resize to",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height to resize to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Game"
            },
            "chainable": 1,
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 302,
            "description": "Requests that the browser go into fullscreen mode.",
            "itemtype": "method",
            "name": "requestFullscreen",
            "return": {
                "description": "Returns itself.",
                "type": "Game"
            },
            "chainable": 1,
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 322,
            "description": "Begins the render loop.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Returns itself.",
                "type": "Game"
            },
            "chainable": 1,
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 335,
            "description": "The looping render tick.",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 379,
            "description": "Alias for the active State's physics object. Instead of using\n`game.state.active.physics`, you can use `game.physics`",
            "itemtype": "property",
            "name": "physics",
            "type": "Physics",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 393,
            "description": "Alias for the active State's camera object. Instead of using\n`game.state.active.camera`, you can use `game.camera`",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 407,
            "description": "Alias for the active State's world object. Instead of using\n`game.state.active.world`, you can use `game.world`",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\State.js",
            "line": 30,
            "description": "The name of this game state",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 38,
            "description": "The game instance that this state belongs too, will be set\nwhen setup() is called with a game instance.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 47,
            "description": "The audio manager for this game state",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioManager",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 56,
            "description": "The container that holds all non-gui sprites and the tilemap",
            "itemtype": "property",
            "name": "world",
            "type": "Tilemap",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 65,
            "description": "The physics system to simulate the world physics",
            "itemtype": "property",
            "name": "physics",
            "type": "Physics",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 74,
            "description": "The camera you view the scene through, will be set\nwhen setup() is called with a game instance.",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 99,
            "description": "Enables (shows) the game state",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "Returns itself.",
                "type": "State"
            },
            "chainable": 1,
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 111,
            "description": "Called internally by `game.resize`. This ensures that the camera\nis the correct size, and renders the world with the new viewport size.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The width of the new viewport",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the new viewport",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "State"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 128,
            "description": "Called by the game each frame to update the state objects.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds passed since the last update call.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "State"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 13,
            "description": "The game instance that this manager belongs to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 21,
            "description": "The states managed by this manager, keyed on the state name",
            "itemtype": "property",
            "name": "states",
            "type": "Object<State>",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 29,
            "description": "The currently active state",
            "itemtype": "property",
            "name": "active",
            "type": "State",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 37,
            "description": "The count of states in this manager",
            "itemtype": "property",
            "name": "count",
            "type": "Number",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 50,
            "description": "Creates the default state",
            "itemtype": "method",
            "name": "_createDefault",
            "return": {
                "description": "The default state",
                "type": "State"
            },
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 59,
            "description": "Adds a state to the game, creating one if necessary.\n\nThere are 3 ways to use this function to add a state to the manager. The simplest case\nis to pass a string for the name, and let the manager create a normal gf.State for you\nwith the name you provided. The second usage is to pass a class that is a decendant of gf.State.\n\nFor example:\n\n```\nfunction MyState(game) {\n    gf.State.call(game, 'some-name');\n}\ngf.inherit(MyState, gf.State);\n\ngame.state.add(MyState); //adds a new instance of your state\n```\n\nThe final usage is to pass a state that is already created. In this case the manager will\nadd the state to the list based on `state.name` and set the game to be the manager's game\ninstance with `state.game = this.game`;",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "state",
                    "description": "The state name, constructor, or state instance to add.",
                    "type": "String|Function|State"
                }
            ],
            "return": {
                "description": "The state that was added",
                "type": "State"
            },
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 112,
            "description": "Removes a state from the game",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "state",
                    "description": "The name of the state to remove, or the state instance itself.",
                    "type": "String|State"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "StateManager"
            },
            "chainable": 1,
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 133,
            "description": "Enables a state in the game.",
            "itemtype": "method",
            "name": "enable",
            "params": [
                {
                    "name": "state",
                    "description": "The name of the state to enable, or the state instance itself.",
                    "type": "String|State"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "StateManager"
            },
            "chainable": 1,
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 156,
            "description": "Destroys the state manager completely",
            "itemtype": "method",
            "name": "destroy",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\World.js",
            "line": 18,
            "description": "The game instance this world belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 26,
            "description": "The game state this world belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "State",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 34,
            "description": "The particle system for the world",
            "itemtype": "property",
            "name": "particles",
            "type": "ParticleSystem",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 42,
            "description": "The bounds of the world",
            "itemtype": "property",
            "name": "bounds",
            "type": "Rectangle",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 50,
            "description": "An object factory for creating game objects",
            "itemtype": "property",
            "name": "add",
            "type": "ObjectFactory",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 60,
            "description": "Pans the world around",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Vector is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "World"
            },
            "chainable": 1,
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 85,
            "description": "Resizes the children of the world, called by game.resize()",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width to resize to",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height to resize to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "World"
            },
            "chainable": 1,
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 104,
            "description": "Called by the state each frame to update the particle system.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds passed since the last update call.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "World"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 15,
            "description": "The center of the circle",
            "itemtype": "property",
            "name": "position",
            "type": "Vector",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 23,
            "description": "The unscaled radius of the circle",
            "itemtype": "property",
            "name": "_radius",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 33,
            "description": "The radius of the circle",
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 42,
            "description": "The scale of the circle",
            "itemtype": "property",
            "name": "scale",
            "type": "Vector",
            "default": "new Vector(1, 1)",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 62,
            "description": "Creates a clone of this Circle instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the circle",
                "type": "Circle"
            },
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 72,
            "description": "Copies the values from another circle to this one",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "circle",
                    "description": "The circle to copy vlaues from",
                    "type": "Circle"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Circle"
            },
            "chainable": 1,
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 88,
            "description": "Checks if the x, and y coords passed to this function are contained within this circle,\nor on the edge of the circle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 111,
            "description": "Checks if this circle overlaps another",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "circle",
                    "description": "The circle to check if this overlaps",
                    "type": "Circle"
                }
            ],
            "return": {
                "description": "if the circle overlaps",
                "type": "Boolean"
            },
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 130,
            "description": "Checks if this circle's values are equal to anothers",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "circle",
                    "description": "The circle to check against",
                    "type": "Circle"
                }
            ],
            "return": {
                "description": "True if they are equal",
                "type": "Boolean"
            },
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 142,
            "description": "Recalculates the scaled radius",
            "itemtype": "method",
            "name": "recalc",
            "return": {
                "description": "Returns itself.",
                "type": "Circle"
            },
            "chainable": 1,
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 156,
            "description": "The center X coord of the circle",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 172,
            "description": "The center Y coord of the circle",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 188,
            "description": "The radius circle",
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 204,
            "description": "The circumference of the circle",
            "itemtype": "property",
            "name": "circumference",
            "type": "Number",
            "readonly": "",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 217,
            "description": "The area of the circle",
            "itemtype": "property",
            "name": "area",
            "type": "Number",
            "readonly": "",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 17,
            "description": "The origin point of the polygon, all points are relative to this",
            "itemtype": "property",
            "name": "position",
            "type": "Vector",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 25,
            "description": "The unscaled points of the polygon, the X & Y values here should be\nrelative to the origin X & Y.",
            "itemtype": "property",
            "name": "_points",
            "type": "Array<Vector>",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 36,
            "description": "The scale of the polygon",
            "itemtype": "property",
            "name": "scale",
            "type": "Vector",
            "default": "new Vector(1, 1)",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 45,
            "description": "The points of the polygon, the X & Y values here should be\nrelative to the origin X & Y values.",
            "itemtype": "property",
            "name": "points",
            "type": "Array<Vector>",
            "default": "[]",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 55,
            "description": "These vectors are calculated by `this.recalc()` and represent the edges\nof the polygon defined by it's points.",
            "itemtype": "property",
            "name": "edges",
            "type": "Array<Vector>",
            "default": "[]",
            "readonly": "",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 66,
            "description": "These vectors are calculated by `this.recalc()` and represent the normals\nof the polygon edges defined by it's points.",
            "itemtype": "property",
            "name": "normals",
            "type": "Array<Vector>",
            "default": "[]",
            "readonly": "",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 104,
            "description": "Creates a clone of this polygon",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Polygon"
            },
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 119,
            "description": "Copies the values from another polygon to this one",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "polygon",
                    "description": "The polygon to copy vlaues from",
                    "type": "Polygon"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Polygon"
            },
            "chainable": 1,
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 145,
            "description": "Checks if the x, and y coords passed to this function are contained within this polygon",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 169,
            "description": "Checks if this polygon's values are equal to anothers",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "polygon",
                    "description": "The polygon to check against",
                    "type": "Polygon"
                }
            ],
            "return": {
                "description": "True if they are equal",
                "type": "Boolean"
            },
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 192,
            "description": "Recalculates the scaled points, edges, and normals of this polygon\nbased on the relative points",
            "itemtype": "method",
            "name": "recalc",
            "return": {
                "description": "Returns itself.",
                "type": "Polygon"
            },
            "chainable": 1,
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 234,
            "description": "The origin X coord of the polygon",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 250,
            "description": "The origin Y coord of the polygon",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 21,
            "itemtype": "property",
            "name": "position",
            "type": "Vector",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 32,
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 40,
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 48,
            "itemtype": "property",
            "name": "halfWidth",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 55,
            "itemtype": "property",
            "name": "halfHeight",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 67,
            "description": "Creates a clone of this Rectangle",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the rectangle",
                "type": "Rectangle"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 77,
            "description": "Copies the values from another rectangle to this one",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "rectangle",
                    "description": "The rectangle to copy vlaues from",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Rectangle"
            },
            "chainable": 1,
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 94,
            "description": "Checks if the x, and y coords passed to this function are contained within this Rectangle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this Rectangle",
                "type": "Boolean"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 118,
            "description": "Checks if this rectangle overlaps another",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle to check if this overlaps",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "if the rectangle overlaps",
                "type": "Boolean"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 132,
            "description": "Returns a polygon from this rectangle's points",
            "itemtype": "method",
            "name": "toPolygon",
            "return": {
                "description": "The new polygon",
                "type": "Polygon"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 149,
            "description": "Checks if this rectangle's values are equal to anothers",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "rectangle",
                    "description": "The rectangle to check against",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "True if they are equal",
                "type": "Boolean"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 162,
            "description": "Combines two rectangles together to create a new rectangle",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "rectangle",
                    "description": "The rectangle to union with",
                    "type": "Rectangle"
                },
                {
                    "name": "output",
                    "description": "The rectangle object to output to, a new one is created by default",
                    "type": "Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new rectangle object that is the combonation of both",
                "type": "Rectangle"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 182,
            "description": "The top-left X coord of the rectangle",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 198,
            "description": "The top-left Y coord of the rectangle",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 215,
            "description": "The width of the object",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 232,
            "description": "The height of the object",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "defualt": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 249,
            "description": "Returns the right most X coord",
            "itemtype": "property",
            "name": "right",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 262,
            "description": "Returns the left most X coord",
            "itemtype": "property",
            "name": "left",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 275,
            "description": "Returns the top most Y coord",
            "itemtype": "property",
            "name": "top",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 288,
            "description": "Returns the bottom most Y coord",
            "itemtype": "property",
            "name": "bottom",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 301,
            "description": "The perimeter of the rectangle",
            "itemtype": "property",
            "name": "perimeter",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 314,
            "description": "The area of the rectangle",
            "itemtype": "property",
            "name": "area",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 14,
            "description": "Sets whether or not you can drag the GuiItem around",
            "itemtype": "property",
            "name": "draggable",
            "type": "Boolean",
            "default": "false",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 23,
            "description": "Describes if the current item is being dragged or not, if it is this\nobject will hold the last local position of the mouse (relative to this object's parent)",
            "itemtype": "property",
            "name": "dragging",
            "type": "Object",
            "default": "false",
            "readonly": "",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 39,
            "description": "Function that is called whenever a mousedown event occurs. This is\nused to handle dragging for GUI items.",
            "itemtype": "method",
            "name": "mousedown",
            "params": [
                {
                    "name": "evt",
                    "description": "The interaction event",
                    "type": "InteractionEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 55,
            "description": "Function that is called whenever a mouseup event occurs. This is\nused to handle dragging for GUI items.",
            "itemtype": "method",
            "name": "mouseup",
            "params": [
                {
                    "name": "evt",
                    "description": "The interaction event",
                    "type": "InteractionEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 68,
            "description": "Function that is called whenever a mousemove event occurs. This is\nused to handle dragging for GUI items.",
            "itemtype": "method",
            "name": "mousemove",
            "params": [
                {
                    "name": "evt",
                    "description": "The interaction event",
                    "type": "InteractionEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "GuiItem"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 14,
            "description": "The threshold at which we consider a button \"pressed\"",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.4",
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 23,
            "description": "Track the status of each button on the gamepad",
            "itemtype": "property",
            "name": "buttons",
            "type": "Object",
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 43,
            "description": "Polls the gamepad object for status updates and emits events when they occur",
            "itemtype": "method",
            "name": "pollStatus",
            "params": [
                {
                    "name": "pad",
                    "description": "The gamepad object to check",
                    "type": "Gamepad"
                }
            ],
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 66,
            "description": "Bindable Gamepad Buttons",
            "itemtype": "property",
            "name": "BUTTON",
            "type": "Object",
            "static": 1,
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 14,
            "description": "The threshold at which we consider a stick moved from center",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.5",
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 23,
            "description": "Track the status of each of the axes on the gamepad",
            "itemtype": "property",
            "name": "axes",
            "type": "Object",
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 42,
            "description": "Polls the gamepad object for status updates and emits events when they occur",
            "itemtype": "method",
            "name": "pollStatus",
            "params": [
                {
                    "name": "pad",
                    "description": "The gamepad object to check",
                    "type": "Gamepad"
                }
            ],
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 67,
            "description": "Bindable Gamepad Axes",
            "itemtype": "property",
            "name": "AXIS",
            "type": "Object",
            "static": 1,
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 18,
            "description": "The id of this pointer",
            "itemtype": "property",
            "name": "id",
            "type": "String|Number",
            "readonly": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 27,
            "description": "The pointer's manager",
            "itemtype": "property",
            "name": "manager",
            "type": "Pointers",
            "readonly": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 36,
            "description": "The game instance of the pointer",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "readonly": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 45,
            "description": "Is this an active pointer (currently touching)?",
            "itemtype": "property",
            "name": "active",
            "type": "Boolean",
            "readonly": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 54,
            "description": "Is this the mouse pointer?",
            "itemtype": "property",
            "name": "mouse",
            "type": "Boolean",
            "readonly": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 63,
            "description": "The clock for timing stuffz",
            "itemtype": "property",
            "name": "clock",
            "type": "Clock",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 73,
            "description": "The button on the pointer being pressed",
            "itemtype": "property",
            "name": "button",
            "type": "Number",
            "readonly": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 82,
            "description": "The type of the pointer",
            "itemtype": "property",
            "name": "type",
            "type": "TYPE",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 90,
            "description": "Have we emitted the hold event already?",
            "itemtype": "property",
            "name": "_holdSent",
            "type": "Boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 105,
            "description": "Callback for when a pointerdown event occurs",
            "itemtype": "method",
            "name": "down",
            "params": [
                {
                    "name": "evt",
                    "description": "The original DOM Event",
                    "type": "DOMEvent"
                }
            ],
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 132,
            "description": "Callback for when a pointerup event occurs",
            "itemtype": "method",
            "name": "up",
            "params": [
                {
                    "name": "evt",
                    "description": "The original DOM Event",
                    "type": "DOMEvent"
                }
            ],
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 171,
            "description": "Callback for when a pointermove event occurs",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "evt",
                    "description": "The original DOM Event",
                    "type": "DOMEvent"
                }
            ],
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 189,
            "description": "Callback for when a pointerleave event occurs",
            "itemtype": "method",
            "name": "leave",
            "params": [
                {
                    "name": "evt",
                    "description": "The original DOM Event",
                    "type": "DOMEvent"
                }
            ],
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 198,
            "description": "Called internally every frame. Updates the pointer",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The delta time (in seconds) since the last update",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 215,
            "description": "Contains the X/Y position in the world of the pointer object",
            "itemtype": "property",
            "name": "positionWorld",
            "type": "Object",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 236,
            "description": "The type of a pointer",
            "itemtype": "property",
            "name": "TYPE",
            "type": "Object",
            "class": "Pointer"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 16,
            "description": "Tracks if we are polling for status/connections",
            "itemtype": "property",
            "name": "ticking",
            "type": "Boolean",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 25,
            "description": "The currently activated gamepads list",
            "itemtype": "property",
            "name": "pads",
            "type": "Array<Gamepad>",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 34,
            "description": "Timestamp tracking for state changes",
            "itemtype": "property",
            "name": "prevTimestamps",
            "type": "Array<Number>",
            "access": "private",
            "tagname": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 43,
            "description": "Holds the button handler for gamepad button events",
            "itemtype": "property",
            "name": "buttons",
            "type": "GamepadButtons",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 52,
            "description": "Holds the stick handler for gamepad stick events",
            "itemtype": "property",
            "name": "sticks",
            "type": "GamepadSticks",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 72,
            "description": "Called when a gamepad connects (FF Only)",
            "itemtype": "method",
            "name": "onGamepadDisconnect",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "GamepadConnectEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 86,
            "description": "Called when a gamepad disconnects (FF Only)",
            "itemtype": "method",
            "name": "onGamepadDisconnect",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "GamepadDisconnectEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 106,
            "description": "Stats polling for new gamepads and status updates",
            "itemtype": "method",
            "name": "startPolling",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 117,
            "description": "Stops polling for new gamepads and status updates",
            "itemtype": "method",
            "name": "stopPolling",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 125,
            "description": "Polls for newly connected gamepads (Chrome Only)",
            "itemtype": "method",
            "name": "pollGamepads",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 148,
            "description": "Polls the gamepad object for status updates and emits events when they occur",
            "itemtype": "method",
            "name": "pollStatus",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 167,
            "description": "Called each frame to update polling mechanisms",
            "itemtype": "method",
            "name": "update",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 16,
            "description": "The game instance this input belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Input"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 15,
            "description": "The game instance this manager belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 23,
            "description": "The dom element to bind events to",
            "itemtype": "property",
            "name": "canvas",
            "type": "Game",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 31,
            "description": "Holds the keyboard handler for keyboard events",
            "itemtype": "property",
            "name": "keyboard",
            "type": "Keyboard",
            "readonly": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 40,
            "description": "Holds the pointer handler for pointer events",
            "itemtype": "property",
            "name": "pointer",
            "type": "Pointer",
            "readonly": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 49,
            "description": "Holds the gamepad handler for gamepad events",
            "itemtype": "property",
            "name": "gamepad",
            "type": "Keyboard",
            "readonly": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 60,
            "description": "Called internally every frame. Updates all the pointers and gamepad",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The delta time (in seconds) since the last update",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 15,
            "description": "The current sequence of keys that have been pressed",
            "itemtype": "property",
            "name": "sequence",
            "type": "Array<Number>",
            "readonly": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 24,
            "description": "The amount of time it takes for the sequence to clear out, in ms",
            "itemtype": "property",
            "name": "sequenceTimeout",
            "type": "Number",
            "default": "500",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 33,
            "description": "The timeout ID for the wait to clear the input sequence",
            "itemtype": "property",
            "name": "_clearSq",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 47,
            "description": "Called when a key is pressed down",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                },
                {
                    "name": "override",
                    "description": "The key code to use instead of checking event data",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 59,
            "description": "Called when a key is released",
            "itemtype": "method",
            "name": "onKeyUp",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                },
                {
                    "name": "override",
                    "description": "The key code to use instead of checking event data",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 71,
            "description": "Called when a key state has changed, updates current sequence and emits events",
            "itemtype": "method",
            "name": "modifyKey",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                },
                {
                    "name": "key",
                    "description": "The key code that has changed",
                    "type": "Number"
                },
                {
                    "name": "down",
                    "description": "Whether the key has been pressed or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 100,
            "description": "Generates an event data object for a keyboard event",
            "itemtype": "method",
            "name": "_getEventData",
            "params": [
                {
                    "name": "event",
                    "description": "The original DOMEvent that was passed into the raw event handler",
                    "type": "DOMEvent"
                },
                {
                    "name": "down",
                    "description": "Is this a keydown event",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 116,
            "description": "Clears the current sequence so that a new one can start",
            "itemtype": "method",
            "name": "_clearSequence",
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 127,
            "description": "Bindable keycodes",
            "itemtype": "property",
            "name": "KEY",
            "type": "Object",
            "static": 1,
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 17,
            "description": "The pointer instances currently being used, keyed by an ID",
            "itemtype": "property",
            "name": "pointers",
            "type": "Object<Pointer>",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 25,
            "description": "The max number of pointers to track",
            "itemtype": "property",
            "name": "maxPointers",
            "type": "Number",
            "default": "10",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 34,
            "description": "The time that must pass between a down (touchstart/mousedown) and up (touchend/mouseup)\nevent for it to be considered a \"click\" event, in milliseconds",
            "itemtype": "property",
            "name": "clickDelay",
            "type": "Number",
            "default": "200",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 44,
            "description": "The max time that can pass between two click events for it to be considered a\n\"doubleclick\" event, in milliseconds",
            "itemtype": "property",
            "name": "doubleClickDelay",
            "type": "Number",
            "default": "300",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 54,
            "description": "The time that must pass after a down event for it to be considered a \"hold\" event, in milliseconds",
            "itemtype": "property",
            "name": "holdDelay",
            "type": "Number",
            "default": "2000",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 79,
            "description": "Fired when a pointer is pressed on the canvas",
            "itemtype": "event",
            "name": "down",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointerdown' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 86,
            "description": "Fired when a pointer is released off the canvas",
            "itemtype": "event",
            "name": "up",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointerup' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 93,
            "description": "Fired when a pointer is moved while on the canvas",
            "itemtype": "event",
            "name": "move",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointermove' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 100,
            "description": "Fired when a pointer moves over the canvas",
            "itemtype": "event",
            "name": "over",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointerover' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 107,
            "description": "Fired when a pointer moves out of the canvas",
            "itemtype": "event",
            "name": "out",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointerout' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 114,
            "description": "Fired when a pointer event is canceled",
            "itemtype": "event",
            "name": "cancel",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointercancel' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 121,
            "description": "Fired when a pointer enters the canvas",
            "itemtype": "event",
            "name": "enter",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointerenter' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 128,
            "description": "Fired when a pointer leaves the canvas",
            "itemtype": "event",
            "name": "leave",
            "params": [
                {
                    "name": "pointer",
                    "description": "The pointer instance that had a 'pointerleave' event",
                    "type": "Pointer"
                }
            ],
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 137,
            "description": "Callback that is called when a pointer event occurs.",
            "itemtype": "method",
            "name": "onPointer",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the pointer event with out the 'pointer' prefix",
                    "type": "String"
                },
                {
                    "name": "evt",
                    "description": "The DOM Event",
                    "type": "DOMEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 165,
            "description": "Called internally every frame. Updates all the pointers",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The delta time (in seconds) since the last update",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Pointers"
            },
            "access": "private",
            "tagname": "",
            "class": "Pointers"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 24,
            "description": "The game instance this loader belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 32,
            "description": "The array of asset keys",
            "itemtype": "property",
            "name": "assets",
            "type": "Array",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 40,
            "description": "The asset data",
            "itemtype": "property",
            "name": "assets",
            "type": "Array",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 48,
            "description": "Number of assets total to load",
            "itemtype": "property",
            "name": "total",
            "type": "Number",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 56,
            "description": "Number of assets done to load (for progress)",
            "itemtype": "property",
            "name": "done",
            "type": "Number",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 64,
            "description": "Whether the loader is actively loading the assets",
            "itemtype": "property",
            "name": "isLoading",
            "type": "Boolean",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 72,
            "description": "Whether the loader has finished loading",
            "itemtype": "property",
            "name": "isLoading",
            "type": "Boolean",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 80,
            "description": "The progress of the loader (0 - 100)",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 88,
            "description": "The cross origin value for loading images",
            "itemtype": "property",
            "name": "crossOrigin",
            "type": "String",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 96,
            "description": "The base URL to prepend to a url, requires the trailing slash",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 104,
            "description": "Fired when an item has started loading",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "numAssets",
                    "description": "The number of assets that are going to be loaded",
                    "type": "Number"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 111,
            "description": "Fired if a loader encounters an error",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": "The error that occured when loading",
                    "type": "Mixed"
                },
                {
                    "name": "key",
                    "description": "The key for the asset that was being loaded",
                    "type": "String"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 119,
            "description": "Fired when an item has loaded",
            "itemtype": "event",
            "name": "progress",
            "params": [
                {
                    "name": "progress",
                    "description": "The integer progress value, between 0 and 100.",
                    "type": "Number"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 126,
            "description": "Fired when all the assets have loaded",
            "itemtype": "event",
            "name": "complete",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 134,
            "description": "Check whether asset exists with a specific key.",
            "itemtype": "method",
            "name": "hasKey",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the asset you want to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return true if exists, otherwise return false.",
                "type": "Boolean"
            },
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 145,
            "description": "Reset loader, this will remove all loaded assets from the loader's stored list (but not from the cache).",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 164,
            "description": "Adds an asset to be loaded",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "type",
                    "description": "The type of asset ot load (image, spritesheet, textureatlas, bitmapfont, tilemap, tileset, audio, etc)",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The unique key of the asset to identify it",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Extra options to apply to the asset, different asset types may require extra options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "crossOrigin",
                            "description": "True if an image load should be treated as crossOrigin",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 200,
            "description": "Add an image to the Loader.",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 217,
            "description": "Add a text file to the Loader.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 234,
            "description": "Add a sprite sheet image to the Loader.",
            "itemtype": "method",
            "name": "spritesheet",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "frameWidth",
                    "description": "Width of each single frame.",
                    "type": "Number"
                },
                {
                    "name": "frameHeight",
                    "description": "Height of each single frame.",
                    "type": "Number"
                },
                {
                    "name": "numFrames",
                    "description": "How many frames in this sprite sheet.",
                    "type": "Number"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 258,
            "description": "Add an audio file to the Loader.",
            "itemtype": "method",
            "name": "audio",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "urls",
                    "description": "URLs of audio files.",
                    "type": "Array<String>"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 275,
            "description": "Add a tilemap to the Loader.",
            "itemtype": "method",
            "name": "tilemap",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the tilemap data.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url of the map data file (csv/json/xml)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data for the map, (to use instead of loading from a URL)",
                    "type": "String|Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "The format of the map data.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "FILE_FORMAT.JSON"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 315,
            "description": "Add a bitmap font to the Loader.",
            "itemtype": "method",
            "name": "bitmapFont",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the bitmap font.",
                    "type": "String"
                },
                {
                    "name": "textureURL",
                    "description": "The url of the font image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the font data file (xml/fnt)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "An optional XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "The format of the bitmap font data.",
                    "type": "FILE_FORMAT",
                    "optional": true,
                    "optdefault": "FILE_FORMAT.XML"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 354,
            "description": "Add a JSON-Array formatted texture atlas. Equivalent to running\n`atlas(key, textureURL, dataUrl, data, gf.ATLAS_FORMAT.JSON_ARRAY);`",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "textureUrl",
                    "description": "The url of the texture atlas image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the texture atlas data file (json/xml)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "A JSON or XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 369,
            "description": "Add a JSON-Hash formatted texture atlas. Equivalent to running\n`atlas(key, textureURL, dataUrl, data, gf.ATLAS_FORMAT.JSON_HASH);`",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "textureUrl",
                    "description": "The url of the texture atlas image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the texture atlas data file (json/xml)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "A JSON or XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 384,
            "description": "Add an XML formatted texture atlas. Equivalent to running\n`atlas(key, textureURL, dataUrl, data, gf.ATLAS_FORMAT.XML_STARLING);`",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "textureUrl",
                    "description": "The url of the texture atlas image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the texture atlas data file (json/xml)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "A JSON or XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 399,
            "description": "Add a new texture atlas loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "textureUrl",
                    "description": "The url of the texture atlas image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the texture atlas data file (json/xml)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "A JSON or XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "A value describing the format of the data.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 437,
            "description": "Starts the loading of all the assets that are queued to load",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 465,
            "description": "Loads a single asset from the queued assets in this Loader. To load a single file first queue it by using\none of the methods named for an asset (like `audio`, `image`, `tilemap`, etc.), then call this to load the\nfirst in the queue.\n\nNote: To load the entire queue at once use `start`.",
            "itemtype": "method",
            "name": "loadFile",
            "return": {
                "description": "Returns itself.",
                "type": "Loader"
            },
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 559,
            "description": "Chooses the audio url to use based on browser support.",
            "itemtype": "method",
            "name": "getAudioUrl",
            "params": [
                {
                    "name": "urls",
                    "description": "An array of URLs to choose from, chooses the first in the array to be\n     supported by the browser.",
                    "type": "Array<String>"
                }
            ],
            "return": {
                "description": "Returns the URL that was chosen, or `undefined` if none are supported.",
                "type": "String"
            },
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 581,
            "description": "Error occured when load a file.",
            "itemtype": "method",
            "name": "fileError",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the error loading file.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error that was thrown.",
                    "type": "Mixed"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 596,
            "description": "Called when a file is successfully loaded.",
            "itemtype": "method",
            "name": "fileComplete",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the successfully loaded file.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 672,
            "description": "Called when a file is done (error or loaded)",
            "itemtype": "method",
            "name": "fileDone",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the file done",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error that occurred (if there was one)",
                    "type": "Mixed"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 700,
            "description": "Returns the ajax type that represents each format type",
            "itemtype": "method",
            "name": "_getFormatAjaxType",
            "params": [
                {
                    "name": "type",
                    "description": "The format to get an ajax type for",
                    "type": "ATLAS_FORMAT|FILE_FORMAT"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 723,
            "description": "Gets a file's data via ajax.",
            "itemtype": "method",
            "name": "_dataget",
            "params": [
                {
                    "name": "file",
                    "description": "The file descriptor object",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to call once the file has loaded. `fileDone` or `fileError` will be\n     called for you.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 753,
            "description": "Loads the tilesets found in a JSON formatted tilemap object.",
            "itemtype": "method",
            "name": "_loadJsonTilesets",
            "params": [
                {
                    "name": "file",
                    "description": "The file descriptor object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 783,
            "description": "Loads the tilesets found in a XML formatted tilemap object.",
            "itemtype": "method",
            "name": "_loadXmlTilesets",
            "params": [
                {
                    "name": "file",
                    "description": "The file descriptor object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 814,
            "description": "Called each time a tileset is loaded successfully.",
            "itemtype": "method",
            "name": "_onTilesetLoaded",
            "params": [
                {
                    "name": "file",
                    "description": "The file descriptor object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 830,
            "description": "Called each time a tileset has an error when loading.",
            "itemtype": "method",
            "name": "_onTilesetError",
            "params": [
                {
                    "name": "file",
                    "description": "The file descriptor object.",
                    "type": "Object"
                },
                {
                    "name": "error",
                    "description": "The error thrown when loading.",
                    "type": "Mixed"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Loader"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 19,
            "description": "Sets the value of the vector",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 34,
            "description": "Sets the X value of the vector",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 47,
            "description": "Sets the Y value of the vector",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 60,
            "description": "Sets a component value of the vector",
            "itemtype": "method",
            "name": "setComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to set the component to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 83,
            "description": "Gets a component value of the vector",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the component value",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 100,
            "description": "Copies the passed vector's components to this vector",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to copy the values from",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 114,
            "description": "Floors the vector components",
            "itemtype": "method",
            "name": "floor",
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 127,
            "description": "Ceils the vector components",
            "itemtype": "method",
            "name": "ceil",
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 140,
            "description": "Adds a vector to this one",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to add to this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 154,
            "description": "Adds two vectors to each other and stores the result in this vector",
            "itemtype": "method",
            "name": "addVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 169,
            "description": "Adds a scalar value to the x and y components of this vector",
            "itemtype": "method",
            "name": "addScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The scalar value to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 183,
            "description": "Subtracts a vector from this one",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to subtract from this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 197,
            "description": "Subtracts two vectors from each other and stores the result in this vector",
            "itemtype": "method",
            "name": "subVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 212,
            "description": "Multiplies the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "multiplyScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to multiply by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 226,
            "description": "Divides the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "divideScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to divide by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 244,
            "description": "Sets this vector components to the minimum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 263,
            "description": "Sets this vector components to the maximum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 282,
            "description": "Clamps the vectors components to be between min and max",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value a component can be",
                    "type": "Vector"
                },
                {
                    "name": "max",
                    "description": "The maximum value a component can be",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 308,
            "description": "Negates this vector (multiplies by -1)",
            "itemtype": "method",
            "name": "negate",
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 318,
            "description": "Project this vector on to another vector.",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to project onto.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 332,
            "description": "Project this vector onto a vector of unit length.",
            "params": [
                {
                    "name": "v",
                    "description": "The unit vector to project onto.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 346,
            "description": "Reflect this vector on an arbitrary axis.",
            "params": [
                {
                    "name": "axis",
                    "description": "The vector representing the axis.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 362,
            "description": "Reflect this vector on an arbitrary axis (represented by a unit vector)",
            "params": [
                {
                    "name": "axis",
                    "description": "The unit vector representing the axis.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 378,
            "description": "Performs the dot product between this vector and the passed one and returns the result",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns the dot product",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 388,
            "description": "Calculates the square length of the vector",
            "itemtype": "method",
            "name": "lengthSq",
            "return": {
                "description": "Returns the square length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 397,
            "description": "Calculates the length of the vector",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "Returns the length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 406,
            "description": "Normalizes this vector (divides by its length)",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "Returns the normalized vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 415,
            "description": "Calculates the distance to the passed vector",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to check distance to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 425,
            "description": "Calculates the square distance to the passed vector",
            "itemtype": "method",
            "name": "distanceToSquared",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to check distance to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The square distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 436,
            "description": "Sets the length of the vector",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "length",
                    "description": "The length to set this vector to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 453,
            "description": "Performs a linear interpolation between this vector and the passed vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to interpolate with",
                    "type": "Vector"
                },
                {
                    "name": "alpha",
                    "description": "The amount to interpolate [0-1] or extrapolate (1-]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 468,
            "description": "Rotates the vector by 90 degrees",
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 481,
            "description": "Rotates the vector by an arbitrary angle around an arbitrary point in space",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians to rotate by",
                    "type": "Number"
                },
                {
                    "name": "anchor",
                    "description": "The anchor point to rotate around",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 498,
            "description": "Checks if this vector is equal to another",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare with",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Vector"
            },
            "chainable": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 509,
            "description": "Returns an array with the components of this vector as the elements",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "Returns an array of [x,y] form",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 518,
            "description": "Creates a new instance of Vector, with the same components as this vector",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Returns a new Vector with the same values",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 529,
            "description": "A vector that is always 0,0",
            "itemtype": "property",
            "name": "ZERO",
            "type": "Vector",
            "readonly": "",
            "static": 1,
            "final": 1,
            "class": "Vector"
        },
        {
            "file": "src\\math\\math.js",
            "line": 12,
            "description": "The factor to multiply by to convert Degrees into Radians. The value is π/180",
            "itemtype": "property",
            "name": "DEG_TO_RAD",
            "type": "Number",
            "readonly": "",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 20,
            "description": "The factor to multiply by to convert Radians into Degrees. The value is 180/π",
            "itemtype": "property",
            "name": "RAD_TO_DEG",
            "type": "Number",
            "readonly": "",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 28,
            "description": "The RNG seed that allows for deterministic random numbers. Change this to a certain value\nto ensure you will have the same sequence of \"random\" numbers. Useful for playbacks, save files,\nprocedural generation, etc.\n\nNote: Deterministic randomness is not yet implemented. Scheduled for v0.2.0",
            "itemtype": "property",
            "name": "SEED",
            "type": "Number",
            "default": "Math.random()",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 40,
            "description": "A Matrix class, directory exposes PIXI.Matrix.",
            "itemtype": "property",
            "name": "Matrix",
            "type": "Matrix",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 47,
            "description": "A 3x3 Matrix namespace, directory exposes PIXI.mat3. You can use this to create 3x3 Matrix classes.",
            "itemtype": "property",
            "name": "mat3",
            "type": "Object",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 54,
            "description": "A 4x4 Matrix namespace, directory exposes PIXI.mat4. You can use this to create 4x4 Matrix classes.",
            "itemtype": "property",
            "name": "mat3",
            "type": "Object",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 61,
            "description": "Alias some native functions for great justice (or incase we want to override)",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 65,
            "description": "Applys a Floor operation to a value, currently uses native Math.floor\nsince it deals with all edge cases that quicker solutions like `~~value`\nor `value | 0` do not.",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "num",
                    "description": "The number to floor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The floored value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 75,
            "description": "Applys a Ceiling operation to a value, currently uses native Math.ceil\nsince it deals with all edge cases",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "num",
                    "description": "The number to ceil",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ceiling value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 84,
            "description": "Generates a random number between 0 and 1, NON DETERMINISTIC",
            "itemtype": "method",
            "name": "random",
            "return": {
                "description": "The random value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 91,
            "description": "Returns the absolute value of a number, currently uses native Math.abs\nsince it is more performant than tricks you can use.\nsee:\n     http://jsperf.com/math-abs-vs-bitwise/7\n     http://jsperf.com/abs-value\n     http://jsperf.com/math-abs-vs-bitwise/3",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "num",
                    "description": "The number to get the absolute value for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The absolute value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 104,
            "description": "Returns the square root of a number, currently uses native Math.sqrt",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "num",
                    "description": "The number to get the sqrt of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sqrt value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 112,
            "description": "Returns the min of the values passed",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number...",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The min value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 120,
            "description": "Returns the max of the values passed",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number...",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The max value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 128,
            "description": "Quickly rounds a number. This is about twice as fast as Math.round()",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "num",
                    "description": "The number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The rounded value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 138,
            "description": "Clamps a number between two values.",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "num",
                    "description": "The number to clamp",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "The minimum value the number is allowed to be",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value the number is allowed to be",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The clamped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 150,
            "description": "Truncates the decimal from a number",
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "num",
                    "description": "The number to truncate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The truncated value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 160,
            "description": "Snaps a number to a grid value.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 10; a position of 18 would snap to 20",
            "itemtype": "method",
            "name": "snap",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 181,
            "description": "Snaps a number to a grid value, using floor.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 10; a position of 18 would also snap to 10",
            "itemtype": "method",
            "name": "snapFloor",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 202,
            "description": "Snaps a number to a grid value, using ceiling.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 20; a position of 18 would also snap to 20",
            "itemtype": "method",
            "name": "snapCeil",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 223,
            "description": "Convert radians to degrees",
            "itemtype": "method",
            "name": "radiansToDegrees",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The angle in degrees",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 233,
            "description": "Convert radians to degrees",
            "itemtype": "method",
            "name": "degreesToRadians",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in degrees to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 243,
            "description": "Calculates the angle between two points",
            "itemtype": "method",
            "name": "angleBetween",
            "params": [
                {
                    "name": "pos1",
                    "description": "The first position",
                    "type": "Vector|Point"
                },
                {
                    "name": "pos2",
                    "description": "The second position",
                    "type": "Vector|Point"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 254,
            "description": "Returns a random boolean based on the provided chance. The chance represents the\npercentage chance of returning: true.",
            "itemtype": "method",
            "name": "randomBool",
            "params": [
                {
                    "name": "chance",
                    "description": "The % chance of getting true (0 - 100), defaults to 50%",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "50"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 277,
            "description": "Returns a random int between min and max.",
            "itemtype": "method",
            "name": "randomInt",
            "params": [
                {
                    "name": "min",
                    "description": "The minimun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The maximun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 294,
            "description": "Returns a random real number between min and max.",
            "itemtype": "method",
            "name": "randomReal",
            "params": [
                {
                    "name": "min",
                    "description": "The minimun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The maximun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 311,
            "description": "Returns a random sign based on the provided chance. The chance represents the\npercentage chance of returning 1 (positive).",
            "itemtype": "method",
            "name": "randomSign",
            "params": [
                {
                    "name": "chance",
                    "description": "The % chance of getting positive (0 - 100), defaults to 50%",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either 1 or -1",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 322,
            "description": "Returns a random string based on a random value between 0 and 1, multiplied\nby the current date. Ex: \"1158014093337\", \"86371874178\", etc",
            "itemtype": "method",
            "name": "randomString",
            "return": {
                "description": "A random string",
                "type": "String"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 332,
            "description": "Generates a random RFC4122 compliant (v4) UUID",
            "itemtype": "method",
            "name": "randomUuid",
            "return": {
                "description": "A random guid",
                "type": "String"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 370,
            "description": "Fills a Typed Array with random bytes. If you do not pass an output param, then a default\nUint8Array(16) is created and returned for you.",
            "itemtype": "method",
            "name": "randomBytes",
            "params": [
                {
                    "name": "output",
                    "description": "The output array for the random data, if none specified a new Uint8Array(16) is created",
                    "type": "TypedArray",
                    "optional": true
                }
            ],
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 382,
            "description": "Returns a random element of an array.",
            "itemtype": "method",
            "name": "randomElement",
            "params": [
                {
                    "name": "array",
                    "description": "The array to choose from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "The index of the first element to include, defaults to 0",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "The index of the last element to include, defaults to array.length - 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either 1 or -1",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 22,
            "description": "The name of the ParticleEmitter instance. This should be unique in a system, and set by the param\npassed to the constructor.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "readonly": "",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 32,
            "description": "The maximum number of particles an emitter can have active at any time.",
            "itemtype": "property",
            "name": "maxParticles",
            "type": "Number",
            "default": "100",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 41,
            "description": "The width of the emitter, particles are emitted in a random integer location\nwithin the width and height of the emitter.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 51,
            "description": "The height of the emitter, particles are emitted in a random integer location\nwithin the width and height of the emitter.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 61,
            "description": "The default lifespan of a particle that is emitted by this ParticleEmitter, in milliseconds",
            "itemtype": "property",
            "name": "lifespan",
            "type": "Number",
            "default": "2000",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 70,
            "description": "The default minSpeed of a particle that is emitted by this ParticleEmitter\nThe actual speed will be a random Vector between `minSpeed` and `maxSpeed`.",
            "itemtype": "property",
            "name": "minSpeed",
            "type": "Vector",
            "default": "new Vector(-100, 100)",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 80,
            "description": "The default maxSpeed of a particle that is emitted by this ParticleEmitter\nThe actual speed will be a random Vector between `minSpeed` and `maxSpeed`.",
            "itemtype": "property",
            "name": "maxSpeed",
            "type": "Vector",
            "default": "new Vector(100, 100)",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 90,
            "description": "The default minScale of a particle that is emitted by this ParticleEmitter\nThe actual scale will be a random number between `minScale` and `maxScale`.",
            "itemtype": "property",
            "name": "minScale",
            "type": "Number",
            "default": "1",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 100,
            "description": "The default maxScale of a particle that is emitted by this ParticleEmitter\nThe actual scale will be a random number between `minScale` and `maxScale`.",
            "itemtype": "property",
            "name": "maxScale",
            "type": "Number",
            "default": "1",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 110,
            "description": "The default minRotation of a particle that is emitted by this ParticleEmitter\nThe actual rotation will be a random integer between `minRotation` and `maxRotation`.",
            "itemtype": "property",
            "name": "minRotation",
            "type": "Number",
            "default": "-2 * Math.PI",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 120,
            "description": "The default maxRotation of a particle that is emitted by this ParticleEmitter\nThe actual rotation will be a random integer between `minRotation` and `maxRotation`.",
            "itemtype": "property",
            "name": "maxRotation",
            "type": "Number",
            "default": "2 * Math.PI",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 130,
            "description": "The time in milliseconds between emissions of particles",
            "itemtype": "property",
            "name": "delay",
            "type": "Number",
            "default": "100",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 139,
            "description": "If true the emitter will emit particles, otherwise it will not.",
            "itemtype": "property",
            "name": "active",
            "type": "Boolean",
            "default": "false",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 148,
            "description": "The internal pool to create and reuse particles from",
            "itemtype": "property",
            "name": "particles",
            "type": "Array<Sprite>",
            "access": "private",
            "tagname": "",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 171,
            "description": "Starts the particle emission, must call `setup` first to setup\nwhat kind of particle to emit.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "lifespan",
                    "description": "The lifespan of a particle in ms",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2000"
                },
                {
                    "name": "delay",
                    "description": "The time between each particle emission in ms",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "250"
                },
                {
                    "name": "rate",
                    "description": "The number of particles to emit each emission",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "total",
                    "description": "The total number of particles to emit",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gf.PARTICLES.MAX_EMITTER_PARTICLES"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "ParticleEmitter"
            },
            "chainable": 1,
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 195,
            "description": "Deactivates the emitter. Particles that are already emitted will continue to\ndecay and die, but no new particles will be emitted.",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "ParticleEmitter"
            },
            "chainable": 1,
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 208,
            "description": "Sets up the particles to be emitted",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "sprite",
                    "description": "Pass a sprite to be clones as a particle,\n     or an array of textures to be randomly chosen from for different particles,\n     or a single texture to use for each particle.",
                    "type": "Sprite|Array<Texture>|Texture"
                },
                {
                    "name": "collide",
                    "description": "The directions the particles are allowed to collide in, use gf.DIRECTION bit flags",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gf.DIRECTION.ALL"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "ParticleEmitter"
            },
            "chainable": 1,
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 241,
            "description": "Gets a particle from the pool and sets it up.",
            "itemtype": "method",
            "name": "_get",
            "return": {
                "description": "The particle to use",
                "type": "Sprite"
            },
            "access": "private",
            "tagname": "",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 266,
            "description": "Frees a particle back into the pool and hides it.",
            "itemtype": "method",
            "name": "_free",
            "params": [
                {
                    "name": "sprite",
                    "description": "The particle to free",
                    "type": "Sprite"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 280,
            "description": "Emits a single particle and sets the position, scale, lifespan, and velocity",
            "itemtype": "method",
            "name": "emitParticle",
            "return": {
                "description": "Returns itself.",
                "type": "ParticleEmitter"
            },
            "chainable": 1,
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 315,
            "description": "Called internally by the ParticleSystem each frame to update each particle's lifespan.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds that have passed since last call",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ParticleEmitter"
        },
        {
            "file": "src\\particles\\ParticleSystem.js",
            "line": 17,
            "description": "The emitters that are contained in this system, keyed by name",
            "itemtype": "property",
            "name": "emitter",
            "type": "Object",
            "readonly": "",
            "class": "ParticleSystem"
        },
        {
            "file": "src\\particles\\ParticleSystem.js",
            "line": 26,
            "description": "The next ID to use for an emitter where no name was passed",
            "itemtype": "property",
            "name": "nextId",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "ParticleSystem"
        },
        {
            "file": "src\\particles\\ParticleSystem.js",
            "line": 37,
            "description": "Adds a particle emitter to the system, creating one if necessary.\n\nThere are 3 ways to use this function to add an emitter to the system. The simplest case\nis to pass a string for the name, and let the manager create a normal gf.ParticleEmitter for you\nwith the name you provided. The second usage is to pass a class that is a decendant of gf.ParticleEmitter.\n\nFor example:\n\n```\nfunction MyEmitter(name) {\n    gf.ParticleEmitter.call(name);\n}\ngf.inherit(MyEmitter, gf.ParticleEmitter);\n\ngame.world.particles.add(MyEmitter); //adds a new instance of your emitter\n```\n\nThe final usage is to pass an Emitter that is already created. In this case the system will\nadd the emitter to the list based on `emitter.name`.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "emitter",
                    "description": "The emitter name, constructor, or emitter instance to add.",
                    "type": "String|Function|ParticleEmitter"
                }
            ],
            "return": {
                "description": "The emitter that was added",
                "type": "ParticleEmitter"
            },
            "class": "ParticleSystem"
        },
        {
            "file": "src\\particles\\ParticleSystem.js",
            "line": 86,
            "description": "Removes an emitter from the system",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "emitter",
                    "description": "The name of the emitter to remove, or the emitter instance itself.",
                    "type": "String|ParticleEmitter"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "ParticleSystem"
            },
            "chainable": 1,
            "class": "ParticleSystem"
        },
        {
            "file": "src\\particles\\ParticleSystem.js",
            "line": 105,
            "description": "Called internally by the World each frame to update each Particle Emitter",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds that have passed since last call",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ParticleSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 29,
            "description": "The state instance this system belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "State",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 37,
            "description": "The chipmunk space instance that will run all the physics simulations",
            "itemtype": "property",
            "name": "space",
            "type": "cp.Space",
            "readonly": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 46,
            "description": "The gravity of the physics space",
            "itemtype": "property",
            "name": "gravity",
            "type": "Vector",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 85,
            "description": "The actions to perform at the next post-step callback. These are\nfor actions (like add, remove) that cannot be performed during a\nsimulation step.",
            "itemtype": "property",
            "name": "actonQueue",
            "type": "Array<Object>",
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 96,
            "description": "The callback functions to call on the next frame",
            "itemtype": "property",
            "name": "tickCallbacks",
            "type": "Array<Function>",
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 105,
            "description": "The number of steps to skip, tracks `this.skip(num)`",
            "itemtype": "property",
            "name": "_skip",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 116,
            "description": "Pauses physics simulation",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 128,
            "description": "Resumes physics simulation",
            "itemtype": "method",
            "name": "resume",
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 140,
            "description": "Skips the specified number of frame steps",
            "itemtype": "method",
            "name": "skip",
            "params": [
                {
                    "name": "num",
                    "description": "Number of steps to skip",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 153,
            "description": "Skips the next frame step",
            "itemtype": "method",
            "name": "skipNext",
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 163,
            "description": "Registers a callback to be executed on the next frame step",
            "itemtype": "method",
            "name": "nextTick",
            "params": [
                {
                    "name": "fn",
                    "description": "The callback to register",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "async": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 177,
            "description": "Returns the collision type of a sprite",
            "itemtype": "method",
            "name": "getCollisionType",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to check",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "The collision type",
                "type": "Number"
            },
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 191,
            "description": "Adds a sprite to the physics simulation",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to add",
                    "type": "Sprite"
                },
                {
                    "name": "callback",
                    "description": "The callback to call once the sprite has been added",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The sprite that was added",
                "type": "Sprite"
            },
            "async": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 239,
            "description": "Removes a sprite from the physics simulation",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to remove",
                    "type": "Sprite"
                },
                {
                    "name": "callback",
                    "description": "The callback to call once the sprite has been removed",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The sprite that was removed",
                "type": "Sprite"
            },
            "async": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 258,
            "description": "Reindexes a sprite's shape in the simulation, useful if it looks\nlike changes are being cached.",
            "itemtype": "method",
            "name": "reindex",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to reindex",
                    "type": "Sprite"
                },
                {
                    "name": "callback",
                    "description": "The callback to call once the sprite has been reindexed",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "async": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 279,
            "description": "Reindexes all static bodies in the simulation.",
            "itemtype": "method",
            "name": "reindexStatic",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to call once reindexing completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "async": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 294,
            "description": "Adds a custom shape to a sprite, useful for a single sprite to have multiple\ndifferent collision shapes (including sensors).",
            "itemtype": "method",
            "name": "addCustomShape",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to add the shape to",
                    "type": "Sprite"
                },
                {
                    "name": "poly",
                    "description": "The shape to create",
                    "type": "Circle|Rectangle|Polygon"
                },
                {
                    "name": "sensor",
                    "description": "Is this a sensor shape, if so you will get a collision callback, but no solve",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The callback to call once the shape has been added",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The shape that was created",
                "type": "cp.Shape"
            },
            "async": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 326,
            "description": "Sets the mass of a sprite's physics body.",
            "itemtype": "method",
            "name": "setMass",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to set the mass for",
                    "type": "Sprite"
                },
                {
                    "name": "mass",
                    "description": "The mass to set",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 343,
            "description": "Sets the velocity of a sprite's physics body.",
            "itemtype": "method",
            "name": "setVelocity",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to set the velocity for",
                    "type": "Sprite"
                },
                {
                    "name": "velocity",
                    "description": "The velocity to set to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 367,
            "description": "Sets the position of a sprite's physics body.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to set the position for",
                    "type": "Sprite"
                },
                {
                    "name": "position",
                    "description": "The position to set to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 392,
            "description": "Sets the rotation of a sprite's physics body.",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to set the rotation for",
                    "type": "Sprite"
                },
                {
                    "name": "rotation",
                    "description": "The rotation to set to in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "PhysicsSystem"
            },
            "chainable": 1,
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 416,
            "description": "Called each frame by the game state to update the physics simulations",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds passed since the last call",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 449,
            "description": "Called when a collision begins in the system",
            "itemtype": "method",
            "name": "onCollisionBegin",
            "params": [
                {
                    "name": "arbiter",
                    "description": "The arbiter of the collision",
                    "type": "cp.Arbiter"
                },
                {
                    "name": "space",
                    "description": "The space the collision occurred in",
                    "type": "cp.Space"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 471,
            "description": "Called after a collision is solved in the system",
            "itemtype": "method",
            "name": "onCollisionPostSolve",
            "params": [
                {
                    "name": "arbiter",
                    "description": "The arbiter of the collision",
                    "type": "cp.Arbiter"
                },
                {
                    "name": "space",
                    "description": "The space the collision occurred in",
                    "type": "cp.Space"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 492,
            "description": "Called after a collision ends in the system (separation)",
            "itemtype": "method",
            "name": "onCollisionEnd",
            "params": [
                {
                    "name": "arbiter",
                    "description": "The arbiter of the collision",
                    "type": "cp.Arbiter"
                },
                {
                    "name": "space",
                    "description": "The space the collision occurred in",
                    "type": "cp.Space"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 511,
            "description": "Attempts to perform the postStep actions that have been queued. If the space\nis currently locked, then it waits until after the step to run the actions.",
            "itemtype": "method",
            "name": "onCollisionEnd",
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 529,
            "description": "Processes the action queue after a step is unlocked.",
            "itemtype": "method",
            "name": "onPostStep",
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 608,
            "description": "Creates a physics body for a sprite",
            "itemtype": "method",
            "name": "_createBody",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to create a body for",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "The chipmunk-js physics body",
                "type": "cp.Body"
            },
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsSystem.js",
            "line": 632,
            "description": "Creates a collision shape for a sprite",
            "itemtype": "method",
            "name": "_createShape",
            "params": [
                {
                    "name": "spr",
                    "description": "The sprite to create a shape for",
                    "type": "Sprite"
                },
                {
                    "name": "body",
                    "description": "The body to attach the shape to",
                    "type": "cp.Body"
                },
                {
                    "name": "poly",
                    "description": "The shape to create, defaults to `spr.hitArea`",
                    "type": "Circle|Rectangle|Polygon",
                    "optional": true
                }
            ],
            "return": {
                "description": "The chipmunk-js collision shape",
                "type": "cp.Shape"
            },
            "access": "private",
            "tagname": "",
            "class": "PhysicsSystem"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 10,
            "description": "The physics namespace that all physics properties go into. Those properties are:\n - system {PhysicsSystem} PhysicsSystem that this object is a part of.\n - active {Boolean} Whether or not this target is actively having physics simulated.",
            "itemtype": "property",
            "name": "_phys",
            "type": "Object",
            "default": "{}",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 23,
            "description": "The mass of this object, please use setMass to set this value",
            "itemtype": "property",
            "name": "mass",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 33,
            "description": "The moment of inertia of this object, only set this before enabling physics (has no effect after enabling)",
            "itemtype": "property",
            "name": "inertia",
            "type": "Number",
            "default": "0",
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 42,
            "description": "The internal velocity value, used as a reusable vector for the setVelocity function. Setting\nthis directly *has no effect*.",
            "itemtype": "property",
            "name": "_velocity",
            "type": "Vector",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 53,
            "description": "Enables physics for this sprite",
            "itemtype": "method",
            "name": "enablePhysics",
            "params": [
                {
                    "name": "system",
                    "description": "The system for the sprite to be in",
                    "type": "PhysicsSystem"
                },
                {
                    "name": "callback",
                    "description": "The callback function to call after physics have been enabled",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "async": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 97,
            "description": "Disbales physics for this sprite",
            "itemtype": "method",
            "name": "disablePhysics",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to call after physics have been disabled",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "async": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 115,
            "description": "Reindexes the collisions for this sprite, useful when moving the sprite a great deal\n(like to a new world)",
            "itemtype": "method",
            "name": "disablePhysics",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to call after the sprite has been reindexed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "async": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 134,
            "description": "Sets the mass of this sprite",
            "itemtype": "method",
            "name": "setMass",
            "params": [
                {
                    "name": "mass",
                    "description": "The new mass of the object",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 150,
            "description": "Sets the velocity of this sprite",
            "itemtype": "method",
            "name": "setVelocity",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to set the velocity to, if a Vector is passed the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y coord to set the velocity to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 172,
            "description": "Sets the rotation of this sprite",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "The new rotation of the object in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 190,
            "description": "Sets the position of this sprite",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to set position to, if a Vector is passed the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y coord to set position to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 212,
            "description": "On Collision Event\n     called when this sprite collides into another, or is being collided into by another.\n     By default if something collides with a collectable sprite we destroy the collectable\n     and if we collide with a solid tile we kill our velocity. This method will emit a\n     'collision' event that you can listen for",
            "itemtype": "event",
            "name": "collision",
            "params": [
                {
                    "name": "obj",
                    "description": "Colliding sprite",
                    "type": "Sprite"
                },
                {
                    "name": "vec",
                    "description": "Collision vector (for sensors this is normalized)",
                    "type": "Vector"
                },
                {
                    "name": "colShape",
                    "description": "The colliding physics shape",
                    "type": "cp.Shape"
                },
                {
                    "name": "myShape",
                    "description": "Your physics shape that caused the collision",
                    "type": "cp.Shape"
                }
            ],
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\physics\\PhysicsTarget.js",
            "line": 229,
            "description": "On Seperate Event\n     called when this sprite collides into another, or is being collided into by another.\n     By default if something collides with a collectable sprite we destroy the collectable\n     and if we collide with a solid tile we kill our velocity. This method will emit a\n     'collision' event that you can listen for",
            "itemtype": "event",
            "name": "separate",
            "params": [
                {
                    "name": "obj",
                    "description": "Colliding sprite",
                    "type": "Sprite"
                },
                {
                    "name": "colShape",
                    "description": "The colliding physics shape",
                    "type": "cp.Shape"
                },
                {
                    "name": "myShape",
                    "description": "Your physics shape that caused the collision",
                    "type": "cp.Shape"
                }
            ],
            "class": "PhysicsTarget"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 32,
            "description": "Whether or not the bitmap text is dirty and should be redrawn",
            "itemtype": "property",
            "name": "dirty",
            "type": "Boolean",
            "default": "false",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 41,
            "description": "The font descriptor that holds the font data (name, size, chars, etc)",
            "itemtype": "property",
            "name": "font",
            "type": "Object",
            "readonly": "",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 50,
            "description": "A monospacing to apply to the font instead of the actual character/kerning spacing.\nWhen set to `0` the default font values will be used.",
            "itemtype": "property",
            "name": "monospace",
            "type": "Number",
            "default": "0",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 60,
            "description": "The actual text that is currently rendered, please use the `text` property\nand do not set this directly.",
            "itemtype": "property",
            "name": "_text",
            "type": "String",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 71,
            "description": "The sprite pool to grab character sprites from",
            "itemtype": "property",
            "name": "sprites",
            "type": "ObjectPool",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 86,
            "description": "Sets the style of the text based on a style object.",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "style",
                    "description": "The style object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "align",
                            "description": "The alignment of the text, can be 'left', 'center', or 'right'",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The font size of the text to display",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 102,
            "description": "Renders the text character sprites when the text is dirty. This is\nautomatically called when the text/style becomes dirty.",
            "itemtype": "method",
            "name": "renderText",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 197,
            "description": "Clones this BitmapText to get another just like it",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "BitmapText"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 209,
            "description": "Updates the text when dirty, called each frame by PIXI's render methods",
            "itemtype": "method",
            "name": "updateTransform",
            "access": "private",
            "tagname": "",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 233,
            "description": "The text that will be rendered.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 249,
            "description": "Parses an XML font file into a font object that can be passed into a BitmapText instance.\nThis is called by the Cache when XML bitmap data is added.",
            "itemtype": "method",
            "name": "parseXML",
            "params": [
                {
                    "name": "key",
                    "description": "The cache key for the font",
                    "type": "String"
                },
                {
                    "name": "xml",
                    "description": "The XML document to parse",
                    "type": "Document"
                },
                {
                    "name": "texture",
                    "description": "The texture to use for creating character textures",
                    "type": "Texture"
                }
            ],
            "static": 1,
            "class": "BitmapText"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 23,
            "description": "The map instance this object group belongs to",
            "itemtype": "property",
            "name": "map",
            "type": "Tilemap",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 31,
            "description": "The game instance this object group belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 39,
            "description": "The state instance this object group belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 47,
            "description": "The name of the group",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 56,
            "description": "The color to display objects in this group",
            "itemtype": "property",
            "name": "color",
            "type": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 64,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 72,
            "description": "The objects in this group that can be spawned",
            "itemtype": "property",
            "name": "objects",
            "type": "Array",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 81,
            "description": "The type of the layer, should always be 'objectgroup'",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'objectgroup'",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 98,
            "description": "Spawns all the entities associated with this layer, and properly sets their attributes",
            "itemtype": "method",
            "name": "spawn",
            "return": {
                "description": "Returns itself.",
                "type": "ObjectGroup"
            },
            "chainable": 1,
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 275,
            "description": "Called internally whenever an event happens on an object, used to echo to the parent.",
            "itemtype": "method",
            "name": "onObjectEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The object the event happened to",
                    "type": "Container|Sprite"
                },
                {
                    "name": "data",
                    "description": "The event data that was passed along",
                    "type": "Mixed"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 287,
            "description": "Creates a polygon from the vertices in a polygon Tiled property",
            "itemtype": "method",
            "name": "_getPolygon",
            "params": [
                {
                    "name": "obj",
                    "description": "The polygon Tiled object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The polygon created",
                "type": "Polygon"
            },
            "access": "private",
            "tagname": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 303,
            "description": "Creates a polyline from the vertices in a polyline Tiled property",
            "itemtype": "method",
            "name": "_getPolyline",
            "params": [
                {
                    "name": "obj",
                    "description": "The polyline Tiled object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The polyline created",
                "type": "Polygon"
            },
            "access": "private",
            "tagname": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 319,
            "description": "Creates a ellipse from the vertices in a ellipse Tiled property",
            "itemtype": "method",
            "name": "_getEllipse",
            "params": [
                {
                    "name": "obj",
                    "description": "The ellipse Tiled object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The ellipse created",
                "type": "Ellipse"
            },
            "access": "private",
            "tagname": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 330,
            "description": "Creates a rectangle from the vertices in a rectangle Tiled property",
            "itemtype": "method",
            "name": "_getRectangle",
            "params": [
                {
                    "name": "obj",
                    "description": "The rectangle Tiled object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The rectangle created",
                "type": "Rectangle"
            },
            "access": "private",
            "tagname": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 341,
            "description": "Checks if an object should be marked as interactive",
            "itemtype": "method",
            "name": "_getInteractive",
            "params": [
                {
                    "name": "set",
                    "description": "The tileset for the object",
                    "type": "Tileset"
                },
                {
                    "name": "props",
                    "description": "The Tiled properties object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether or not the item is interactive",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 359,
            "description": "Despawns all the sprites associated with this layer",
            "itemtype": "method",
            "name": "despawn",
            "return": {
                "description": "Returns itself.",
                "type": "ObjectGroup"
            },
            "chainable": 1,
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 369,
            "description": "Destroys the group completely",
            "itemtype": "method",
            "name": "destroy",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 27,
            "description": "The map instance this tilelayer belongs to",
            "itemtype": "property",
            "name": "map",
            "type": "Tilemap",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 35,
            "description": "The state instance this tilelayer belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 43,
            "description": "The state instance this tilelayer belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 51,
            "description": "The current map of all tiles on the screen",
            "itemtype": "property",
            "name": "tiles",
            "type": "Object",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 59,
            "description": "The name of the layer",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 68,
            "description": "The size of the layer",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new Vector(1, 1)",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 77,
            "description": "The tile IDs of the tilemap",
            "itemtype": "property",
            "name": "tileIds",
            "type": "Uint32Array",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 85,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 93,
            "description": "The Tiled type of tile layer, should always be 'tilelayer'",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'tilelayer'",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 102,
            "description": "Is this layer supposed to be preRendered?",
            "itemtype": "property",
            "name": "preRender",
            "type": "Boolean",
            "default": "false",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 111,
            "description": "The size of a chunk when pre rendering",
            "itemtype": "property",
            "name": "chunkSize",
            "type": "Vector",
            "default": "new Vector(512, 512)",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 138,
            "description": "Creates all the tile sprites needed to display the layer",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The number of tiles in the X direction to render",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The number of tiles in the Y direction to render",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Tilelayer"
            },
            "chainable": 1,
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 172,
            "description": "Renders the map onto different canvases, one per chunk. This only runs once\nthen the canvases are used as a textures for tiles the size of chunks.",
            "itemtype": "method",
            "name": "_preRender",
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 202,
            "description": "Renders a single chunk to a single canvas and creates/places the tile instance for it.",
            "itemtype": "method",
            "name": "_preRenderChunk",
            "params": [
                {
                    "name": "cx",
                    "description": "The x-coord of this chunk's top left",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "The y-coord of this chunk's top left",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The width of this chunk",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The height of this chunk",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 272,
            "description": "Renders the tiles for the viewport",
            "itemtype": "method",
            "name": "_renderTiles",
            "params": [
                {
                    "name": "sx",
                    "description": "The x-coord in the map to start rendering",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "The y-coord in the map to start rendering",
                    "type": "Number"
                },
                {
                    "name": "sw",
                    "description": "The width of the viewport",
                    "type": "Number"
                },
                {
                    "name": "sh",
                    "description": "The height of the viewport",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 322,
            "description": "Frees a tile in the list back into the pool",
            "itemtype": "method",
            "name": "_freeTile",
            "params": [
                {
                    "name": "tx",
                    "description": "The x-coord of the tile in tile coords (not world coords)",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "The y-coord of the tile in tile coords (not world coords)",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 336,
            "description": "Clears all the tiles currently used to render the layer",
            "itemtype": "method",
            "name": "clearTiles",
            "params": [
                {
                    "name": "remove",
                    "description": "Should this tile be completely removed (never to bee seen again)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Tilelayer"
            },
            "chainable": 1,
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 366,
            "description": "Clears a tile currently used to render the layer",
            "itemtype": "method",
            "name": "clearTile",
            "params": [
                {
                    "name": "tile",
                    "description": "The tile object to clear",
                    "type": "Tile"
                },
                {
                    "name": "remove",
                    "description": "Should this tile be completely removed (never to bee seen again)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Tilelayer"
            },
            "chainable": 1,
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 386,
            "description": "Moves a tile sprite from one position to another, and creates a new tile\nif the old position didn't have a sprite",
            "itemtype": "method",
            "name": "moveTileSprite",
            "params": [
                {
                    "name": "fromTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "fromTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "toTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                },
                {
                    "name": "toTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sprite to display",
                "type": "Tile"
            },
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 489,
            "description": "Called whenever a tile event occurs, this is used to echo to the parent.",
            "itemtype": "method",
            "name": "onTileEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "tile",
                    "description": "The tile the event happened to",
                    "type": "Tile"
                },
                {
                    "name": "data",
                    "description": "The event data that was passed along",
                    "type": "Mixed"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 501,
            "description": "Checks if an object should be marked as interactive",
            "itemtype": "method",
            "name": "_getInteractive",
            "params": [
                {
                    "name": "set",
                    "description": "The tileset for the object",
                    "type": "Tileset"
                },
                {
                    "name": "props",
                    "description": "The Tiled properties object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether or not the item is interactive",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 517,
            "description": "Pans the layer around, rendering stuff if necessary",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "The x amount to pan, if a Point is passed the dy param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "dy",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Tilelayer"
            },
            "chainable": 1,
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 588,
            "description": "Renders tiles to the left, pulling from the far right",
            "itemtype": "method",
            "name": "_renderLeft",
            "params": [
                {
                    "name": "forceNew",
                    "description": "If set to true, new tiles are created instead of trying to recycle",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 608,
            "description": "Renders tiles to the right, pulling from the far left",
            "itemtype": "method",
            "name": "_renderRight",
            "params": [
                {
                    "name": "forceNew",
                    "description": "If set to true, new tiles are created instead of trying to recycle",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 628,
            "description": "Renders tiles to the top, pulling from the far bottom",
            "itemtype": "method",
            "name": "_renderUp",
            "params": [
                {
                    "name": "forceNew",
                    "description": "If set to true, new tiles are created instead of trying to recycle",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 648,
            "description": "Renders tiles to the bottom, pulling from the far top",
            "itemtype": "method",
            "name": "_renderDown",
            "params": [
                {
                    "name": "forceNew",
                    "description": "If set to true, new tiles are created instead of trying to recycle",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 668,
            "description": "Destroys the tile layer completely",
            "itemtype": "method",
            "name": "destroy",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 28,
            "description": "The state instance this tilemap belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 36,
            "description": "The game instance this tilemap belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 47,
            "description": "The user-defined properties",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "default": "{}",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 58,
            "description": "The tile size",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 66,
            "description": "The size of the map",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new Vector(0, 0)",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 75,
            "description": "The orientation of the map",
            "itemtype": "property",
            "name": "orientation",
            "type": "String",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 83,
            "description": "The version of the TMX format",
            "itemtype": "property",
            "name": "version",
            "type": "Number",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 91,
            "description": "The background color of the map (since Tiled 0.9.0)",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "Number",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 101,
            "description": "The tilesets used by this map",
            "itemtype": "property",
            "name": "tilesets",
            "type": "Array",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 109,
            "description": "The scaled tile size",
            "itemtype": "property",
            "name": "scaledTileSize",
            "type": "Vector",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 120,
            "description": "The real size (size * scaledTileSize)",
            "itemtype": "property",
            "name": "realSize",
            "type": "Vector",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 165,
            "description": "Gets the tileset that an ID is associated with",
            "itemtype": "method",
            "name": "getTileset",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to find the tileset for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the tileset if found, undefined if not",
                "type": "TiledTileset"
            },
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 177,
            "description": "Destroys the tilemap instance",
            "itemtype": "method",
            "name": "destroy",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 196,
            "description": "Spawns all the objects in the ObjectGroups of this map",
            "itemtype": "method",
            "name": "spawnObjects",
            "return": {
                "description": "Returns itself.",
                "type": "Tilemap"
            },
            "chainable": 1,
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 214,
            "description": "Spawns all the objects in the ObjectGroups of this map",
            "itemtype": "method",
            "name": "despawnObjects",
            "return": {
                "description": "Returns itself.",
                "type": "Tilemap"
            },
            "chainable": 1,
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 232,
            "description": "Clears all the tiles that are currently used on all tile layers",
            "itemtype": "method",
            "name": "clearTiles",
            "return": {
                "description": "Returns itself.",
                "type": "Tilemap"
            },
            "chainable": 1,
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 250,
            "description": "Called by a Tilelayer when a tile event occurs. This is so you can listen for\nthe emitted events on the world instead of the tile itself.",
            "itemtype": "method",
            "name": "onTileEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to emit, the prefix 'tile.' will be added to it",
                    "type": "String"
                },
                {
                    "name": "tile",
                    "description": "The tile that has the event",
                    "type": "Tile"
                },
                {
                    "name": "data",
                    "description": "The raw interaction object for the event",
                    "type": "InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 266,
            "description": "Called by a ObjectGroup when an object event occurs. This is so you can listen for\nthe emitted events on the world instead of the tile itself.",
            "itemtype": "method",
            "name": "onObjectEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to emit, the prefix 'object.' will be added to it",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The object that has the event",
                    "type": "Sprite|Container"
                },
                {
                    "name": "data",
                    "description": "The raw interaction object for the event",
                    "type": "InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 282,
            "description": "Finds a layer based on the string name",
            "itemtype": "method",
            "name": "findLayer",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the layer to find",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the layer if found, undefined if not",
                "type": "Tilelayer|ObjectGroup|Sprite"
            },
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 297,
            "description": "Pans the map around",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Tilemap"
            },
            "chainable": 1,
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 316,
            "description": "Called on resize to render the viewport again",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "x",
                    "description": "The x offset to consider the top-left",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y offset to consider the top-left",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width (in pixels) to render",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height (in pixels) to render",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Tilemap"
            },
            "chainable": 1,
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 39,
            "description": "The first tileId in the tileset",
            "itemtype": "property",
            "name": "firstgid",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 47,
            "description": "The name of the tileset",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 55,
            "description": "The size of a tile in the tileset",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 63,
            "description": "The spacing around a tile in the tileset",
            "itemtype": "property",
            "name": "spacing",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 71,
            "description": "The margin around a tile in the tileset",
            "itemtype": "property",
            "name": "margin",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 79,
            "description": "The offset of tile positions when rendered",
            "itemtype": "property",
            "name": "tileoffset",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 95,
            "description": "The number of tiles calculated based on size, margin, and spacing",
            "itemtype": "property",
            "name": "numTiles",
            "type": "Vector",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 106,
            "description": "The last tileId in the tileset",
            "itemtype": "property",
            "name": "lastgid",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 114,
            "description": "The properties of the tileset",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 122,
            "description": "The properties of the tiles in the tileset (like collision stuff)",
            "itemtype": "property",
            "name": "tileproperties",
            "type": "Object",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 130,
            "description": "The size of the tileset",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 141,
            "description": "The texture instances for each tile in the set",
            "itemtype": "property",
            "name": "textures",
            "type": "Array",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 178,
            "description": "Gets the tile properties for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileProperties",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the properties for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The properties of the tile",
                "type": "Object"
            },
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 213,
            "description": "Gets the tile texture for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileTexture",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the texture for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The texture for the tile",
                "type": "Texture"
            },
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 231,
            "description": "Returns whether or not this tileset contains the given tile guid",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "tileId",
                    "description": "The ID of the tile to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 247,
            "description": "Tileset GID flags, these flags are set on a tile's ID to give it a special property",
            "itemtype": "property",
            "name": "FLAGS",
            "static": 1,
            "class": "Tileset"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 21,
            "description": "Local reference to Game.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 29,
            "description": "Canvas key-value container.",
            "itemtype": "property",
            "name": "_canvases",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 38,
            "description": "Image key-value container.",
            "itemtype": "property",
            "name": "_images",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 47,
            "description": "Sound key-value container.",
            "itemtype": "property",
            "name": "_sounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 56,
            "description": "Text key-value container.",
            "itemtype": "property",
            "name": "_text",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 65,
            "description": "Tilemap key-value container.",
            "itemtype": "property",
            "name": "_tilemaps",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 78,
            "description": "Add a new canvas.",
            "itemtype": "method",
            "name": "addCanvas",
            "params": [
                {
                    "name": "obj",
                    "description": "The spritesheet object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for this canvas.",
                            "type": "String"
                        },
                        {
                            "name": "canvas",
                            "description": "Canvas DOM element.",
                            "type": "HTMLCanvasElement"
                        },
                        {
                            "name": "context",
                            "description": "Render context of this canvas.",
                            "type": "CanvasRenderingContext2D"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 91,
            "description": "Add a new sprite sheet.",
            "itemtype": "method",
            "name": "addSpriteSheet",
            "params": [
                {
                    "name": "obj",
                    "description": "The spritesheet object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the sprite sheet.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this sprite sheet file.",
                            "type": "String"
                        },
                        {
                            "name": "image",
                            "description": "The image of the sprite sheet",
                            "type": "Image"
                        },
                        {
                            "name": "frameWidth",
                            "description": "Width of the sprite sheet.",
                            "type": "Number"
                        },
                        {
                            "name": "frameHeight",
                            "description": "Height of the sprite sheet.",
                            "type": "Number"
                        },
                        {
                            "name": "frameMax",
                            "description": "How many frames stored in the sprite sheet.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 115,
            "description": "Add a new tilemap.",
            "itemtype": "method",
            "name": "addTilemap",
            "params": [
                {
                    "name": "obj",
                    "description": "The tilemap file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the tilemap",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of the tilemap data file",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The loaded tilemap data",
                            "type": "Object"
                        },
                        {
                            "name": "format",
                            "description": "The format of the tilemap data",
                            "type": "Number"
                        },
                        {
                            "name": "images",
                            "description": "Array of images used in the tilesets of this tilemap",
                            "type": "Array<Image>",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 155,
            "description": "Add a new texture atlas.",
            "itemtype": "method",
            "name": "addTextureAtlas",
            "params": [
                {
                    "name": "obj",
                    "description": "The texture atlas file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the texture atlas.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this texture atlas file.",
                            "type": "String"
                        },
                        {
                            "name": "format",
                            "description": "The format of the atlas data ATLAS_FORMAT.JSON_ARRAY, ATLAS_FORMAT.JSON_HASH, or ATLAS_FORMAT.STARLING_XML",
                            "type": "Number"
                        },
                        {
                            "name": "data",
                            "description": "The texture atlas data exported from TexturePacker",
                            "type": "Object"
                        },
                        {
                            "name": "image",
                            "description": "The texture image",
                            "type": "Image"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 183,
            "description": "Add a new Bitmap Font.",
            "itemtype": "method",
            "name": "addBitmapFont",
            "params": [
                {
                    "name": "obj",
                    "description": "The bitmap font file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the font texture.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this font xml file.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Extra font data.",
                            "type": "Object"
                        },
                        {
                            "name": "format",
                            "description": "The format of the bitmap font data",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 205,
            "description": "Add a new image.",
            "itemtype": "method",
            "name": "addImage",
            "params": [
                {
                    "name": "obj",
                    "description": "The image file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the image.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this image file.",
                            "type": "String"
                        },
                        {
                            "name": "image",
                            "description": "The image object that was loaded",
                            "type": "Image"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 224,
            "description": "Add a new sound.",
            "itemtype": "method",
            "name": "addAudio",
            "params": [
                {
                    "name": "obj",
                    "description": "The audio file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the audio.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this audio file.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The loaded audio data",
                            "type": "ArrayBuffer|Audio"
                        },
                        {
                            "name": "webAudio",
                            "description": "Is this a webAudio ArrayBuffer for a sound?",
                            "type": "Boolean"
                        },
                        {
                            "name": "decoded",
                            "description": "Is the data decoded yet?",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 252,
            "description": "Add a new text data.",
            "itemtype": "method",
            "name": "addText",
            "params": [
                {
                    "name": "obj",
                    "description": "The text file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the text data.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this text data file.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Extra text data.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 265,
            "description": "Adds a default image to be used when a key is wrong / missing.\nIs mapped to the key __default",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 287,
            "description": "Get canvas by key.",
            "itemtype": "method",
            "name": "getCanvas",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the canvas you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLCanvasElement"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 299,
            "description": "Get image data by key.",
            "itemtype": "method",
            "name": "getImage",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the image you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Image"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 311,
            "description": "Get a Texture by key.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the RenderTexture you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 323,
            "description": "Get a Texture by key.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the RenderTexture you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 335,
            "description": "Get a Bitmap Font by key.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the Bitmap Font you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 347,
            "description": "Get tilemap data by key.",
            "itemtype": "method",
            "name": "getTilemap",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the tilemap you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The tilemap file data. The map data is in the `data` property, the images (for tileset) are in `images`",
                "type": "Object"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 358,
            "description": "Get sound by key.",
            "itemtype": "method",
            "name": "getAudio",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 369,
            "description": "Get sound data by key.",
            "itemtype": "method",
            "name": "getAudioData",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "ArrayBuffer|Audio"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 381,
            "description": "Get text data by key.",
            "itemtype": "method",
            "name": "getText",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the text data you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The text data you want.",
                "type": "Object"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 393,
            "description": "Remove a canvas by key.",
            "itemtype": "method",
            "name": "removeCanvas",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 403,
            "description": "Remove an image by key.",
            "itemtype": "method",
            "name": "removeImage",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 413,
            "description": "Remove a sound by key.",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 423,
            "description": "Remove a text by key.",
            "itemtype": "method",
            "name": "removeText",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 433,
            "description": "Destroys this object, removing references so the GC can cleanup",
            "itemtype": "method",
            "name": "destroy",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 23,
            "description": "Gets the current time from the underlying timer",
            "itemtype": "method",
            "name": "now",
            "return": {
                "description": "The current timestamp",
                "type": "Number"
            },
            "example": [
                "\n     clock.now();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 34,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "Returns itself.",
                "type": "Clock"
            },
            "chainable": 1,
            "example": [
                "\n     clock.start();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 49,
            "description": "Stops the timer",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "Returns itself.",
                "type": "Clock"
            },
            "chainable": 1,
            "example": [
                "\n     clock.stop();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 64,
            "description": "Resets the timer",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "Returns itself.",
                "type": "Clock"
            },
            "chainable": 1,
            "example": [
                "\n     clock.reset();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 79,
            "description": "Gets the total time that the timer has been running",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "Total ellapsed time in ms",
                "type": "Number"
            },
            "example": [
                "\n     clock.getElapsedTime();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 92,
            "description": "Gets the difference in time since getDelta() was called last",
            "itemtype": "method",
            "name": "getDelta",
            "return": {
                "description": "Ellapsed time since last call in seconds",
                "type": "Number"
            },
            "example": [
                "\n     clock.getDelta();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 12,
            "description": "Registers a listener function to be run on an event occurance",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to listen for",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to execute when the event happens",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 41,
            "description": "Emits an event which will run all registered listeners for the event type",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to emit",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Any data you want passed along with the event",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 98,
            "description": "Removes a listener function for an event type",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to emit",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to remove",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 145,
            "description": "Registers a one-time callback for an event",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to listen for",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "the callback to call when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself.",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 27,
            "description": "Adds a generic object to the world or camera",
            "itemtype": "method",
            "name": "obj",
            "params": [
                {
                    "name": "object",
                    "description": "Any game object you want to add to the parent",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the added object",
                "type": "Mixed"
            },
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 37,
            "description": "Creates a new sprite and adds it to the game world",
            "itemtype": "method",
            "name": "sprite",
            "params": [
                {
                    "name": "texture",
                    "description": "The texture for the sprite, or the key for one in the cache",
                    "type": "String|Texture"
                },
                {
                    "name": "frame",
                    "description": "A specific frame of a sprite sheet to use, either the index or string key\n     depending on the type of the sheet when loaded.",
                    "type": "String|Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "physics",
                    "description": "Should this sprite be added to the physics simulation?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The sprite added",
                "type": "Sprite"
            },
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 72,
            "description": "Creates a new AudioPlayer to play the sound passed in",
            "itemtype": "method",
            "name": "audio",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded audio",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the audio player (see AudioManager.add for all settings)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The player added",
                "type": "AudioPlayer"
            },
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 83,
            "description": "Creates a new tilemap to add to the world",
            "itemtype": "method",
            "name": "tilemap",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded tilemap data",
                    "type": "String"
                },
                {
                    "name": "constrain",
                    "description": "Should the camera be constrained to this tilemap's size?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The tilemap added",
                "type": "Tilemap"
            },
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 124,
            "description": "Creates a new gui item and adds it to the Camera's GUI",
            "itemtype": "method",
            "name": "gui",
            "params": [
                {
                    "name": "texture",
                    "description": "The texture for the item, or the key for one in the cache",
                    "type": "String|Texture"
                },
                {
                    "name": "interactive",
                    "description": "Can the item be interacted with by mouse (clicked, dragged, etc)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The new gui item added",
                "type": "GuiItem"
            },
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 138,
            "description": "Creates a new instance of BitmapText",
            "itemtype": "method",
            "name": "bitmaptext",
            "params": [
                {
                    "name": "text",
                    "description": "The text for the BitmapText to display",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "The key for the bitmap font loaded into the cache",
                    "type": "String"
                },
                {
                    "name": "interactive",
                    "description": "Can the item be interacted with by mouse (clicked, dragged, etc)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The bitmap text object added",
                "type": "BitmapText"
            },
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectPool.js",
            "line": 21,
            "description": "Creates a new instance of the pool's object type, or if available\npulls one that is already created out of the pool",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "The instance of the object pulled from the pool",
                "type": "Mixed"
            },
            "class": "ObjectPool"
        },
        {
            "file": "src\\utils\\ObjectPool.js",
            "line": 41,
            "description": "Frees an object back into the pool to be recycled",
            "itemtype": "method",
            "name": "free",
            "class": "ObjectPool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 16,
            "description": "The game instance this pool belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 28,
            "description": "Adds an Sprite Type to the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite Type to add",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The Sprite or decendant type to add to the pool",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns the passed sprite",
                "type": "Sprite"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 39,
            "description": "Checks if the Sprite Type exists in the pool",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite Type to check if is in the pool",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 49,
            "description": "Creates a new sprite from the pool",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite to check if is in the pool",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "The texture for the sprite",
                    "type": "Texture"
                },
                {
                    "name": "props",
                    "description": "Extra object that will be passed along (for custom sprite options)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new instance of the object from the pool",
                "type": "Sprite"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 64,
            "description": "Frees an object back into the pool to be recycled, currently doesn't do any recycling unfortunately",
            "itemtype": "method",
            "name": "free",
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\inherit.js",
            "line": 1,
            "description": "Inherits the prototype of a parent object.",
            "itemtype": "method",
            "name": "inherit",
            "params": [
                {
                    "name": "child",
                    "description": "The Child to inherit the prototype",
                    "type": "Function"
                },
                {
                    "name": "parent",
                    "description": "The Parent to inherit from",
                    "type": "Function"
                },
                {
                    "name": "proto",
                    "description": "The prototype to apply to the child",
                    "type": "Object"
                }
            ],
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 10,
            "description": "The current user agent string",
            "itemtype": "property",
            "name": "ua",
            "type": "String",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 18,
            "description": "Whether or not canvas is supported",
            "itemtype": "property",
            "name": "canvas",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 26,
            "description": "Whether or not webgl is supported",
            "itemtype": "property",
            "name": "webgl",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 34,
            "description": "Whether or not the crypto API is supported",
            "itemtype": "property",
            "name": "crypto",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 42,
            "description": "Whether or not web workers are supported",
            "itemtype": "property",
            "name": "workers",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 50,
            "description": "Whether or not Blob URLs are supported",
            "itemtype": "property",
            "name": "blobs",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 58,
            "description": "Whether or not typed arrays are supported",
            "itemtype": "property",
            "name": "typedArrays",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 66,
            "description": "Whether or not the filesystem API is supported",
            "itemtype": "property",
            "name": "fileapi",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 74,
            "description": "Whether or not the Web Audio API is supported",
            "itemtype": "property",
            "name": "webAudio",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 82,
            "description": "Whether html Audio is supported in this browser",
            "itemtype": "property",
            "name": "htmlAudio",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 90,
            "description": "Whether or not local storage is supported",
            "itemtype": "property",
            "name": "localStorage",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 98,
            "description": "Whether or not touch is supported",
            "itemtype": "property",
            "name": "touch",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 106,
            "description": "Whether or not the gamepad API is supported",
            "itemtype": "property",
            "name": "gamepad",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 115,
            "description": "Describes which audio codecs a browser supports",
            "itemtype": "property",
            "name": "codec",
            "type": "Object",
            "class": "support"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 15,
            "description": "An empty function that performs no action",
            "itemtype": "method",
            "name": "noop",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 21,
            "description": "Gets the absolute url from a relative one",
            "itemtype": "method",
            "name": "getAbsoluteUrl",
            "params": [
                {
                    "name": "url",
                    "description": "The relative url to translate into absolute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute url (fully qualified)",
                "type": "String"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 33,
            "description": "Performs an ajax request, and manages the callbacks passed in",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings of the ajax request, similar to jQuery's ajax function",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An XHR object",
                "type": "XMLHttpRequest|ActiveXObject"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 103,
            "description": "Wraps XMLHttpRequest in a cross-browser way.",
            "itemtype": "method",
            "name": "AjaxRequest",
            "return": {
                "description": "",
                "type": "XMLHttpRequest|ActiveXObject"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 133,
            "description": "This will take values and override the passed obj's properties with those values.\nThe difference from a normal object extend is that this will try to massage the passed\nvalue into the same type as the object's property. Also if the key for the value is not\nin the original object, it is not copied.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to extend the values into",
                    "type": "Object"
                },
                {
                    "name": "values",
                    "description": "The values to put into the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the updated object",
                "type": "Object"
            },
            "example": [
                "\n     var obj = { vec: new Vector(), arr: [] },\n         vals = { vec: '2|5', arr: '5|10|11' };\n     utils.setValues(obj, vals);\n     //now obj is:\n     // { vec: Vector(2, 5), arr: [5, 10, 11] }\n     "
            ],
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 201,
            "description": "From jQuery.extend, extends one object into another\ntaken straight from jQuery 2.0.3",
            "itemtype": "method",
            "name": "extend",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 270,
            "description": "From jQuery.isPlainObject, checks if an object is a plain object\ntaken straight from jQuery 2.0.3",
            "itemtype": "method",
            "name": "isPlainObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 303,
            "description": "Get the DOM offset values of any given element",
            "itemtype": "method",
            "name": "getOffset",
            "params": [
                {
                    "name": "element",
                    "description": "The targeted element that we want to retrieve the offset",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "The offset of the element",
                "type": "Vector"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 322,
            "description": "Parses an array of numbers that represent a hitArea into the actual shape.\n\nFor example: `[1, 1, 15]` is a Circle (`[x, y, radius]`); `[1, 1, 15, 15]` is a Rectangle\n(`[x, y, width, height]`); and any length >= 5 is a polygon in the form `[x1, y1, x2, y2, ..., xN, yN]`.",
            "itemtype": "method",
            "name": "parseHitArea",
            "params": [
                {
                    "name": "value",
                    "description": "The array to parse",
                    "type": "Array<Number>"
                }
            ],
            "return": {
                "description": "The parsed out shape",
                "type": "Circle|Rectangle|Polygon"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 355,
            "description": "Parses an object of string properties into potential javascript types. First it attempts to\nconvert to a number, if that fails it checks for the string 'true' or 'false' and changes it\nto the actual Boolean value, then it attempts to parse a string as JSON.",
            "itemtype": "method",
            "name": "parseTiledProperties",
            "params": [
                {
                    "name": "value",
                    "description": "The array to parse",
                    "type": "Array<Number>"
                }
            ],
            "return": {
                "description": "The parsed out shape",
                "type": "Circle|Rectangle|Polygon"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 404,
            "description": "Safe way to log to console, if console.log doesn't exist nothing happens.",
            "itemtype": "method",
            "name": "log",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 413,
            "description": "Safe way to warn to console, if console.warn doesn't exist nothing happens.",
            "itemtype": "method",
            "name": "warn",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 422,
            "description": "Safe way to error to console, if console.error doesn't exist nothing happens.",
            "itemtype": "method",
            "name": "error",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 433,
            "description": "Parses an XML string into a Document object. Will use window.DOMParser\nif available, falling back to Microsoft.XMLDOM ActiveXObject in IE.\n\nEventually, it would be nice to include a node.js alternative as well\nfor running in that environment.",
            "itemtype": "method",
            "name": "parseXML",
            "params": [
                {
                    "name": "xmlStr",
                    "description": "The xml string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An XML Document",
                "type": "Document"
            },
            "class": "utils"
        },
        {
            "file": "src\\constants.js",
            "line": 11,
            "description": "Represents automatically choosing a renderer",
            "itemtype": "property",
            "name": "AUTO",
            "type": "String",
            "default": "'auto'",
            "static": 1,
            "final": 1,
            "class": "RENDERER"
        },
        {
            "file": "src\\constants.js",
            "line": 21,
            "description": "Represents the canvas renderer",
            "itemtype": "property",
            "name": "CANVAS",
            "type": "String",
            "default": "'canvas'",
            "static": 1,
            "final": 1,
            "class": "RENDERER"
        },
        {
            "file": "src\\constants.js",
            "line": 31,
            "description": "Represents the webgl renderer",
            "itemtype": "property",
            "name": "WEBGL",
            "type": "String",
            "default": "'webgl'",
            "static": 1,
            "final": 1,
            "class": "RENDERER"
        },
        {
            "file": "src\\constants.js",
            "line": 51,
            "description": "Represents the json file type",
            "itemtype": "property",
            "name": "JSON",
            "type": "String",
            "default": "'json'",
            "static": 1,
            "final": 1,
            "class": "FILE_FORMAT"
        },
        {
            "file": "src\\constants.js",
            "line": 61,
            "description": "Represents the xml file type",
            "itemtype": "property",
            "name": "XML",
            "type": "String",
            "default": "'xml'",
            "static": 1,
            "final": 1,
            "class": "FILE_FORMAT"
        },
        {
            "file": "src\\constants.js",
            "line": 71,
            "description": "Represents the csv file type",
            "itemtype": "property",
            "name": "CSV",
            "type": "String",
            "default": "'csv'",
            "static": 1,
            "final": 1,
            "class": "FILE_FORMAT"
        },
        {
            "file": "src\\constants.js",
            "line": 91,
            "description": "Represents the JSON Array export type of TexturePacker",
            "itemtype": "property",
            "name": "JSON_ARRAY",
            "type": "String",
            "default": "'json_array'",
            "static": 1,
            "final": 1,
            "class": "ATLAS_FORMAT"
        },
        {
            "file": "src\\constants.js",
            "line": 101,
            "description": "Represents the JSON Hash export type of TexturePacker",
            "itemtype": "property",
            "name": "JSON_HASH",
            "type": "String",
            "default": "'json_hash'",
            "static": 1,
            "final": 1,
            "class": "ATLAS_FORMAT"
        },
        {
            "file": "src\\constants.js",
            "line": 111,
            "description": "Represents the Starling XML format, this export type is supported by TexturePacker",
            "itemtype": "property",
            "name": "XML_STARLING",
            "type": "String",
            "default": "'xml_starling'",
            "static": 1,
            "final": 1,
            "class": "ATLAS_FORMAT"
        },
        {
            "file": "src\\constants.js",
            "line": 131,
            "description": "Represents platformer follow style",
            "itemtype": "property",
            "name": "PLATFORMER",
            "type": "Number",
            "default": "0",
            "static": 1,
            "final": 1,
            "class": "CAMERA_FOLLOW"
        },
        {
            "file": "src\\constants.js",
            "line": 141,
            "description": "Represents topdown follow style",
            "itemtype": "property",
            "name": "TOPDOWN",
            "type": "Number",
            "default": "1",
            "static": 1,
            "final": 1,
            "class": "CAMERA_FOLLOW"
        },
        {
            "file": "src\\constants.js",
            "line": 151,
            "description": "Represents a tight topdown follow style",
            "itemtype": "property",
            "name": "TOPDOWN_TIGHT",
            "type": "Number",
            "default": "2",
            "static": 1,
            "final": 1,
            "class": "CAMERA_FOLLOW"
        },
        {
            "file": "src\\constants.js",
            "line": 161,
            "description": "Represents a lockon follow style, this has no deadzone and the camera will\nfollow the target movement exactly.",
            "itemtype": "property",
            "name": "LOCKON",
            "type": "Number",
            "default": "3",
            "static": 1,
            "final": 1,
            "class": "CAMERA_FOLLOW"
        },
        {
            "file": "src\\constants.js",
            "line": 182,
            "description": "Represents no axis, binary value: 0000",
            "itemtype": "property",
            "name": "NONE",
            "type": "Number",
            "default": "0",
            "static": 1,
            "final": 1,
            "class": "AXIS"
        },
        {
            "file": "src\\constants.js",
            "line": 192,
            "description": "Represents a horizontal axis, binary value: 0001",
            "itemtype": "property",
            "name": "HORIZONTAL",
            "type": "Number",
            "default": "1",
            "static": 1,
            "final": 1,
            "class": "AXIS"
        },
        {
            "file": "src\\constants.js",
            "line": 202,
            "description": "Represents a vertical axis, binary value: 0010",
            "itemtype": "property",
            "name": "VERTICAL",
            "type": "Number",
            "default": "2",
            "static": 1,
            "final": 1,
            "class": "AXIS"
        },
        {
            "file": "src\\constants.js",
            "line": 212,
            "description": "Represents both axes, binary value: 0011",
            "itemtype": "property",
            "name": "VERTICAL",
            "type": "Number",
            "default": "3",
            "static": 1,
            "final": 1,
            "class": "AXIS"
        },
        {
            "file": "src\\constants.js",
            "line": 232,
            "description": "Represents no direction, binary value: 0000",
            "itemtype": "property",
            "name": "NONE",
            "type": "Number",
            "default": "0",
            "static": 1,
            "final": 1,
            "class": "DIRECTION"
        },
        {
            "file": "src\\constants.js",
            "line": 242,
            "description": "Represents left direction, binary value: 0001",
            "itemtype": "property",
            "name": "LEFT",
            "type": "Number",
            "default": "1",
            "static": 1,
            "final": 1,
            "class": "DIRECTION"
        },
        {
            "file": "src\\constants.js",
            "line": 252,
            "description": "Represents right direction, binary value: 0010",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "Number",
            "default": "2",
            "static": 1,
            "final": 1,
            "class": "DIRECTION"
        },
        {
            "file": "src\\constants.js",
            "line": 262,
            "description": "Represents top (up) direction, binary value: 0100",
            "itemtype": "property",
            "name": "TOP",
            "type": "Number",
            "default": "4",
            "static": 1,
            "final": 1,
            "class": "DIRECTION"
        },
        {
            "file": "src\\constants.js",
            "line": 272,
            "description": "Represents bottom (down) direction, binary value: 1000",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "Number",
            "default": "8",
            "static": 1,
            "final": 1,
            "class": "DIRECTION"
        },
        {
            "file": "src\\constants.js",
            "line": 282,
            "description": "Represents all directions, binary value: 1111",
            "itemtype": "property",
            "name": "ALL",
            "type": "Number",
            "default": "15",
            "static": 1,
            "final": 1,
            "class": "DIRECTION"
        },
        {
            "file": "src\\core.js",
            "line": 1,
            "license": "GrapeFruit Game Engine\nCopyright (c) 2012-2014, Chad Engler\n\nGrapeFruit is licensed under the MIT License.\nhttp://www.opensource.org/licenses/mit-license.php\n\nKnown Limiting Features:\n  - Canvas\n      - IE 9+\n      - FF 2+\n      - Chrome 4+\n      - Safari 3.1+\n      - Opera 9+\n\n  - WebGL\n      - IE 11+\n      - FF 4+\n      - Chrome 8+\n      - Safari 6+\n      - Opera 12+\n\n  - Object.create\n      - IE 9+\n      - FF 4+\n      - Chrome 7+\n      - Safari 5+\n      - Opera 12+",
            "class": "plugin"
        },
        {
            "file": "src\\plugin.js",
            "line": 9,
            "description": "Patches a core function with a new one. The function you override with has a special property\ncalled `this._super` which is a reference to the function you are overriding.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the method to override",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the method to override",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to override with",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     //For example, to patch the gf.Sprite.prototype.isActiveAnimation function:\n\n     gf.plugin.patch(gf.Sprite, 'isActiveAnimation', function() {\n         //display a console message\n         console.log('checking animation!');\n         //call the original function\n         this._super();\n     });"
            ],
            "class": "plugin"
        },
        {
            "file": "src\\plugin.js",
            "line": 55,
            "description": "Registers a plugin into the gf namespace.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "plugin",
                    "description": "The object to place in the namespace",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the plugin to use as the key",
                    "type": "String"
                }
            ],
            "example": [
                "\n     //For example, to register a new plugin:\n     gf.plugin.register(MyPluginObject, 'MyPluginName');\n     var plg = new gf.MyPluginName();"
            ],
            "class": "plugin"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: defualt",
            "line": " src\\geom\\Rectangle.js:232"
        },
        {
            "message": "unknown tag: license",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\nAdd a JSON-Array formatted texture atlas. Equivalent to running\n`atlas(key, textureURL, dataUrl, data, gf.ATLAS_FORMAT.JSON_ARRAY);`",
            "line": " src\\loader\\Loader.js:354"
        },
        {
            "message": "Missing item type\nAdd a JSON-Hash formatted texture atlas. Equivalent to running\n`atlas(key, textureURL, dataUrl, data, gf.ATLAS_FORMAT.JSON_HASH);`",
            "line": " src\\loader\\Loader.js:369"
        },
        {
            "message": "Missing item type\nAdd an XML formatted texture atlas. Equivalent to running\n`atlas(key, textureURL, dataUrl, data, gf.ATLAS_FORMAT.XML_STARLING);`",
            "line": " src\\loader\\Loader.js:384"
        },
        {
            "message": "Missing item type\nAdd a new texture atlas loading request.",
            "line": " src\\loader\\Loader.js:399"
        },
        {
            "message": "Missing item type\nProject this vector on to another vector.",
            "line": " src\\math\\Vector.js:318"
        },
        {
            "message": "Missing item type\nProject this vector onto a vector of unit length.",
            "line": " src\\math\\Vector.js:332"
        },
        {
            "message": "Missing item type\nReflect this vector on an arbitrary axis.",
            "line": " src\\math\\Vector.js:346"
        },
        {
            "message": "Missing item type\nReflect this vector on an arbitrary axis (represented by a unit vector)",
            "line": " src\\math\\Vector.js:362"
        },
        {
            "message": "Missing item type\nRotates the vector by 90 degrees",
            "line": " src\\math\\Vector.js:468"
        },
        {
            "message": "Missing item type\nAlias some native functions for great justice (or incase we want to override)",
            "line": " src\\math\\math.js:61"
        },
        {
            "message": "Missing item type\nAdds a default image to be used when a key is wrong / missing.\nIs mapped to the key __default",
            "line": " src\\utils\\Cache.js:265"
        },
        {
            "message": "Missing item type",
            "line": " src\\core.js:1"
        }
    ]
}